{"meta":{"title":"Will's blog","subtitle":null,"description":"will go everywhere!","author":"willwang","url":"https://willwang.top"},"pages":[{"title":"about","date":"2019-03-10T00:32:43.158Z","updated":"2019-03-10T00:32:43.158Z","comments":true,"path":"about/index.html","permalink":"https://willwang.top/about/index.html","excerpt":"","text":"...... 什么都没有，快来diss他。"},{"title":"所有分类","date":"2019-03-10T06:13:15.894Z","updated":"2019-03-10T04:46:01.450Z","comments":true,"path":"categories/index.html","permalink":"https://willwang.top/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2019-03-09T10:05:50.815Z","updated":"2019-03-09T10:05:50.815Z","comments":true,"path":"friends/index.html","permalink":"https://willwang.top/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： Will’s blog头像： https://willwang.top/img/favicons/head.png网址： https://willwang.top标签： java"},{"title":"所有标签","date":"2019-03-10T06:13:01.754Z","updated":"2019-03-10T04:45:45.682Z","comments":true,"path":"tags/index.html","permalink":"https://willwang.top/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-03-10T08:57:40.694Z","updated":"2019-03-10T08:44:42.398Z","comments":true,"path":"assets/plugin/busuanzi/2.3/busuanzi.pure.mini.js","permalink":"https://willwang.top/assets/plugin/busuanzi/2.3/busuanzi.pure.mini.js","excerpt":"","text":"var bszCaller,bszTag;!function(){var c,d,e,a=!1,b=[];ready=function(c){return a||\"interactive\"===document.readyState||\"complete\"===document.readyState?c.call(document):b.push(function(){return c.call(this)}),this},d=function(){for(var a=0,c=b.length;c>a;a++)b[a].apply(document);b=[]},e=function(){a||(a=!0,d.call(window),document.removeEventListener?document.removeEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.detachEvent(\"onreadystatechange\",e),window==window.top&&(clearInterval(c),c=null)))},document.addEventListener?document.addEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.attachEvent(\"onreadystatechange\",function(){/loaded|complete/.test(document.readyState)&&e()}),window==window.top&&(c=setInterval(function(){try{a||document.documentElement.doScroll(\"left\")}catch(b){return}e()},5)))}(),bszCaller={fetch:function(a,b){var c=\"BusuanziCallback_\"+Math.floor(1099511627776*Math.random());window[c]=this.evalCall(b),a=a.replace(\"=BusuanziCallback\",\"=\"+c),scriptTag=document.createElement(\"SCRIPT\"),scriptTag.type=\"text/javascript\",scriptTag.defer=!0,scriptTag.src=a,document.getElementsByTagName(\"HEAD\")[0].appendChild(scriptTag)},evalCall:function(a){return function(b){ready(function(){try{a(b),scriptTag.parentElement.removeChild(scriptTag)}catch(c){bszTag.hides()}})}}},bszCaller.fetch(\"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback\",function(a){bszTag.texts(a),bszTag.shows()}),bszTag={bszs:[\"site_pv\",\"page_pv\",\"site_uv\"],texts:function(a){this.bszs.map(function(b){var c=document.getElementById(\"busuanzi_value_\"+b);c&&(c.innerHTML=a[b])})},hides:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"none\")})},shows:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"inline\")})}};"}],"posts":[{"title":"Deep Learning basics p1: Introduction to Deep Learning","slug":"Deep-Learning-basics-p1-Introduction-to-Deep-Learning","date":"2019-03-19T16:00:00.000Z","updated":"2019-03-20T16:15:46.703Z","comments":true,"path":"published/2019/03/20/Deep-Learning-basics-p1-Introduction-to-Deep-Learning/","link":"","permalink":"https://willwang.top/published/2019/03/20/Deep-Learning-basics-p1-Introduction-to-Deep-Learning/","excerpt":"通过python、Tensorflow和Keras框架实现的深度学习实例。本文是第一篇。原文：Introduction to Deep Learning - Deep Learning basics with Python, TensorFlow and Keras p.1","text":"通过python、Tensorflow和Keras框架实现的深度学习实例。本文是第一篇。原文：Introduction to Deep Learning - Deep Learning basics with Python, TensorFlow and Keras p.1 简单总结下，不一定正确，只为加深印象。一般包括以下几个步骤： 导包 实例化数据集 建立模型 配置学习模型 训练模型 测试样本 保存模型 进行预测 示例代码如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# 1 导包import tensorflow as tf #deep learning library. Tensors are just multi-dimensional arraysimport matplotlib.pyplot as pltimport numpy as np# 2 实例化数据集mnist = tf.keras.datasets.mnist # mnist is a dataset of 28x28 images of handwritten digits and their labels(x_train, y_train), (x_test, y_test) = mnist.load_data() # unpacks images to x_train/x_test and labels to y_train/y_test# print(x_train[0])# 归一化处理，使取值范围在[0, 1]或[-1, 1]x_train = tf.keras.utils.normalize(x_train, axis=1) # scales data between 0 and 1x_test = tf.keras.utils.normalize(x_test, axis=1)# print(x_train[0])# imshow是设置图片的展示，cmap意思是color map，颜色方案，binary代表是白底黑字；# plt.imshow(x_train[0], cmap = plt.cm.binary)# plt.show()# 3 建立模型model = tf.keras.models.Sequential() # a basic feed-forward modelmodel.add(tf.keras.layers.Flatten()) # flatten date ,takes our 28x28 and makes it 1x784 ## Adds a densely-connected layer with 128 units to the model:model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))# Add a softmax layer with 10 output units:model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))# 4 配置学习模型model.compile(optimizer='adam', # Good default optimizer to start with #优化器 loss='sparse_categorical_crossentropy',# how will we calculate our \"error.\" Neural network aims to minimize loss. #优化期间最小化的函数 # sparse: 稀疏的 categorical:绝对的，无条件的，分类的 crossentropy:交叉熵 metrics=['accuracy']) # what to track #用于监控训练# 5 训练模型 循环轮次：3model.fit(x_train, y_train, epochs=3) # train the model# 6 测试样本val_loss, val_acc = model.evaluate(x_test, y_test) # evaluate the out of sample data with modelprint(val_loss) # model's loss (error)print(val_acc) # model's accuracy# 7 保存model.save('epic_num_reader.model')# 重新实例化模型，会创建一个完全一样的模型new_model = tf.keras.models.load_model('epic_num_reader.model')# 8 预测predictions = new_model.predict(x_test)print(predictions)# 显示数字print(np.argmax(predictions[0]))# 显示数字图像plt.imshow(x_test[0], cmap = plt.cm.binary)plt.show()","categories":[{"name":"AI","slug":"AI","permalink":"https://willwang.top/categories/AI/"}],"tags":[{"name":"deep learning basics","slug":"deep-learning-basics","permalink":"https://willwang.top/tags/deep-learning-basics/"}]},{"title":"win7下安装Anaconda3和tensorflow","slug":"win7下安装Anaconda3和tensorflow","date":"2019-03-18T16:00:00.000Z","updated":"2019-03-19T16:40:41.490Z","comments":true,"path":"published/2019/03/19/win7下安装Anaconda3和tensorflow/","link":"","permalink":"https://willwang.top/published/2019/03/19/win7下安装Anaconda3和tensorflow/","excerpt":"win7搭建Anaconda3及tensorflow环境其中：本地python为v3.6.5, Anaconda3为Anaconda3-5.2.0-Windows-x86_64","text":"win7搭建Anaconda3及tensorflow环境其中：本地python为v3.6.5, Anaconda3为Anaconda3-5.2.0-Windows-x86_64 1 安装pythonpython3和python2环境变量共存设置1%Python3%;%Python3%\\Scripts;%Python2%;%Python2%\\Scripts; 2 安装及配置pip安装及升级python -m pip install –upgrade pip 国内pip源清华：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：http://mirrors.aliyun.com/pypi/simple/中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/华中理工大学：http://pypi.hustunique.com/山东理工大学：http://pypi.sdutlinux.org/豆瓣：http://pypi.douban.com/simple/ 更改pip源windows环境下，添加或修改为：C:\\Users\\will\\pip\\pip.ini12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple linux环境下,添加或修改为：$HOME/pip/pip.conf12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple 3 安装及配置Anaconda33.1 下载Anaconda3Anaconda3-5.2.0,进行安装 3.2 配置Anaconda3环境变量新建系统变量：ANACONDA3 为 C:/MyProgramFiles/Anaconda3在Path添加1%ANACONDA3%;%ANACONDA3%/Library/mingw-w64/bin;%ANACONDA3%/Library/bin;%ANACONDA3%/Scripts; 参考后，目前没有配置：%ANACONDA3%/Library/usr/bin，原因：没找到路径,可能是win没有。 测试是否配置成功：命令行下输入:conda 3.3 登录jupyter运行Jupyter Notebook。看到http://localhost:8888/?token=...表示成功 3.4 修改coanda包管理源123conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes 可能有用，coanda删除源1coanda config --remove channels https://error…… 4 安装tensorflowtensorflow版本分为： CPU版本：pip3 install –upgrade tensorflow GPU版本：pip3 install –upgrade tensorflow-gpu（电脑不支持） 安装cpu版本pip install –upgrade tensorflow tensorflow安装成功测试12345python&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; hello = tf.constant('Hello, TensorFlow!')&gt;&gt;&gt; sess = tf.Session()&gt;&gt;&gt; print(sess.run(hello)) Ref Anaconda安装与环境配置 TensorFlow在Windows环境下的搭建","categories":[{"name":"AI","slug":"AI","permalink":"https://willwang.top/categories/AI/"}],"tags":[{"name":"deep learning basics","slug":"deep-learning-basics","permalink":"https://willwang.top/tags/deep-learning-basics/"}]},{"title":"Welcome to my blog","slug":"welcome","date":"2019-03-09T16:00:00.000Z","updated":"2019-03-10T04:39:26.443Z","comments":true,"path":"published/2019/03/10/welcome/","link":"","permalink":"https://willwang.top/published/2019/03/10/welcome/","excerpt":"","text":"欢迎访问我的博客，希望留下你美丽的足记。","categories":[],"tags":[{"name":"欢迎","slug":"欢迎","permalink":"https://willwang.top/tags/欢迎/"}]},{"title":"CentOS6.5下搭建mongodb主、从、仲裁节点副本集实践","slug":"CentOS6-5下搭建mongodb主、从、仲裁节点副本集实践","date":"2019-03-09T16:00:00.000Z","updated":"2019-03-10T08:11:21.881Z","comments":true,"path":"published/2019/03/10/CentOS6-5下搭建mongodb主、从、仲裁节点副本集实践/","link":"","permalink":"https://willwang.top/published/2019/03/10/CentOS6-5下搭建mongodb主、从、仲裁节点副本集实践/","excerpt":"准备工作： 下载mongodb，本次实践版本号mongodb-linux-x86_64-2.6.7.tgz 设置防火墙为允许 准备好配置文件，及生成keyFile文件，开启keyFile就相当于开启auth","text":"准备工作： 下载mongodb，本次实践版本号mongodb-linux-x86_64-2.6.7.tgz 设置防火墙为允许 准备好配置文件，及生成keyFile文件，开启keyFile就相当于开启auth 1 设置配置文件，及生成keyFile文件1.1 设置配置文件主节点/usr/local/mongodb_master/mongodb_master.conf123456789dbpath=/storage/mongodb/masterlogpath=/usr/local/mongodb_master/logs/mongodb.logdirectoryperdb=port=27017maxConns=500smallfiles=truefork=replSet=rs1#keyFile=/usr/local/mongodb_master/keyFile注意：smallfiles= 是设置最小存储空间，用于自测试配置配置文件中：#keyFile=/usr/local/mongodb_master/keyFile，初始时注销掉，不启用备节点/usr/local/mongodb_master/mongodb_slave.conf123456789dbpath=/storage/mongodb/slavelogpath=/usr/local/mongodb_master/logs/mongodb.logdirectoryperdb=port=27018maxConns=500smallfiles=fork=replSet=rs1#keyFile=/usr/local/mongodb_slave/keyFile仲裁节点/usr/local/mongodb_master/mongodb_arbiter.conf123456789dbpath=/storage/mongodb/arbiterlogpath=/usr/local/mongodb_arbiter/logs/mongodb.logdirectoryperdb=port=27019maxConns=500smallfiles=fork=replSet=rs1#keyFile=/usr/local/mongodb_arbiter/keyFile 1.2 生成keyFile文件keyFile文件的作用： 集群之间的安全认证，增加安全认证机制KeyFile（开启keyfile认证就默认开启了auth认证） openssl rand -base64 741 &gt; keyFile #生成keyFile chmod 600 keyFile #设置权限，不能太大 scp –r keyFile root@host:/usr/local/mongodb_arbiter/keyFile ## 复制到所有节点 2 初始化副本集2.1 初始化单点初始化：123456rscfg = &#123; _id:\"rs1\", members:[&#123; _id:0, host:\"192.168.1.78:27017\"&#125;]&#125;rs.initiate( rscfg ) 多节点初始化:12345678rscfg = &#123; _id:\"rs1\", members:[&#123; _id:0, host:\"192.168.1.71:27017\", priority:2&#125;,&#123; _id:1, host:\"192.168.1.82:27018\", priority:1&#125;,&#123; _id:2, host:\"192.168.1.71:27019\", arbiterOnly:true&#125;]&#125;rs.initiate( rscfg ) 2.2 单节点初始化后：添加、删除节点操作123456789添加secondary：rs.add(&#123;host: \"192.168.1.78:27018\", priority: 1 &#125;)添加仲裁点：rs.addArb(\"192.168.1.78:27019\")移除节点：rs.remove(&#123;host: \"192.168.1.78:27019\"&#125;)重置节点权限：conf=rscfg.conf()conf.members[0].priority=2rs.reconfig(config)查看集群配置：rs.conf();查看集群状态：rs.status(); 3 添加管理员用户及普通用户,并进行验证(在rs1:PRIMARY上操作)注意：需要在主节点(PRIMARY)操作;帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)创建用户管理员:123456789admin = db.getSiblingDB(\"admin\"); #其中getSiblingDB为获取另一个数据库对象admin.createUser( &#123; user: \"admin\", pwd: \"admin\", roles: [ &#123; role: \"userAdminAnyDatabase\", db: \"admin\" &#125; ] &#125;)admin.auth(\"admin\", \"admin\" ); 创建集群管理员:12345678admin.createUser( &#123; user: \"username\", pwd: \"pwd\", roles: [ &#123; role: \"clusterAdmin\", db: \"admin\" &#125; ] &#125;)admin.auth(\"username\", \"pwd\" ); 其他用户相关操作 更新用户：db.getSiblingDB(“admin”);updateUser(“username”,{roles: [ { role: “userAdminAnyDatabase”, db: “admin” } ]}) 验证用户：db.getSiblingDB(“admin”).auth(“username”, “pwd” ) 修改密码：db.changeUserPassword(“username”,”pwd”); 集群及其他角色授权： 1234db.grantRolesToUser( \"admin\" , [ &#123; \"role\": \"clusterAdmin\", \"db\": \"admin\" &#125;,&#123; \"role\": \"userAdminAnyDatabase\", \"db\": \"admin\" &#125;,&#123; \"role\": \"dbAdminAnyDatabase\", \"db\": \"admin\" &#125;,&#123; role: \"root\", db: \"admin\" &#125; ]) 如果是admin，可以额外添加： 1&#123; role: \"dbOwner\", db: \"admin\" &#125; 加上dbOwner可以直接操作其他数据库如replSetTest，不需要重新认证 db.auth(‘admin’,’admin’) 4 重启集群由于关闭主节点，则主节点状态会切到副本集中的从节点，因此，先关闭从节点，最后关闭主节点。db.getSiblingDB(“admin”).shutdownServer(); 或ps -ef | grep mongo, kill +pid 取消所有节点配置文件中的注释，keyFile=/usr/local/mongodb_arbiter/keyFile重新启动服务 如果启动异常，删除mongo.lock, rm -f mongo.lock，重新启动 5 验证登录主节点：12345rs1:PRIMARY&gt;rs.status();显示：not authorized for queryrs1:PRIMARY&gt;db.getSiblingDB(\"admin\").auth(\"username\", \"pwd\" );授权后，可进行操作rs1:PRIMARY&gt;db.t1.insert(&#123;\"name\":\"zs\",\"age\":11&#125;) 登录从节点查看是否同步：12345rs1:SECONDARY&gt;db.t1.find() #显示：not authorized for query on test.t1\"rs1:SECONDARY&gt;db.getSiblingDB(\"admin\").auth(\"username\", \"pwd\" ); #验证rs1:SECONDARY&gt;db.t1.find(); #not master and slaveOk=false\"rs1:SECONDARY&gt;db.setSlaveOk(); #读权限rs1:SECONDARY&gt;db.t1.find(); #查询所有记录 注意：授权操作过程 rs1:PRIMARY&gt;rs.conf() # 访问异常,not authorized for query on test.t1”rs1:PRIMARY&gt;use admin #切换数据库rs1:PRIMARY&gt;db.auth(“username”, “pwd” ); #授权rs1:PRIMARY&gt;use test #切换其他库rs1:PRIMARY&gt;rs.conf() #正常访问 6 java测试副本集连接代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class TestMongo&#123; private static MongoClient mongoClient = null; public DB getDB() throws UnknownHostException &#123; DB conn = null; if (mongoClient == null) &#123; intializeMongoClient(); &#125; conn = mongoClient.getDB(\"testdb\"); return conn; &#125; private static void intializeMongoClient() throws UnknownHostException &#123; MongoClientURI mongoClientURI = new MongoClientURI(\"mongodb://username:pwd@192.168.1.78: 27017,192.168.1.78: 27018,192.168.1.78: 27019/admin\");// MongoClientURI mongoClientURI = new MongoClientURI(\"mongodb://192.168.1.78: 27017\"); mongoClient = new MongoClient(mongoClientURI); &#125; public synchronized void closeConnection() &#123; if (mongoClient != null) &#123; mongoClient.close(); &#125; &#125; public static void main(String[] args) &#123; TestMongo testMongo = new TestMongo(); DBObject content=new BasicDBObject(); content.put(\"name\",\"北京4\"); content.put(\"type\",\"首都\"); try &#123; DB db = testMongo.getDB(); DBCollection collection=db.getCollection(\"n1\"); collection.insert(content); long count = collection.getCount(); System.out.println(count); testMongo.closeConnection(); &#125; catch (UnknownHostException e) &#123; e.printStackTrace(); &#125; &#125;&#125; Ref Enforce Keyfile Access Control in a Replica Set Enable Authentication in a Sharded Cluster mongodb之replSet复制集 + auth mongodb副本集用户权限设置 Mongodb集群搭建及spring和java连接配置记录","categories":[{"name":"数据库","slug":"数据库","permalink":"https://willwang.top/categories/数据库/"},{"name":"mongodb","slug":"数据库/mongodb","permalink":"https://willwang.top/categories/数据库/mongodb/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"https://willwang.top/tags/mongodb/"}]}]}