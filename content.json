{"meta":{"title":"Will's blog","subtitle":null,"description":"will go everywhere!","author":"willwang","url":"https://willwang.top"},"pages":[{"title":"about","date":"2019-03-10T00:32:43.158Z","updated":"2019-03-10T00:32:43.158Z","comments":true,"path":"about/index.html","permalink":"https://willwang.top/about/index.html","excerpt":"","text":"...... 什么都没有，快来diss他。"},{"title":"所有分类","date":"2019-03-10T06:13:15.894Z","updated":"2019-03-10T04:46:01.450Z","comments":true,"path":"categories/index.html","permalink":"https://willwang.top/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2019-03-09T10:05:50.815Z","updated":"2019-03-09T10:05:50.815Z","comments":true,"path":"friends/index.html","permalink":"https://willwang.top/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： Will’s blog头像： https://willwang.top/img/favicons/head.png网址： https://willwang.top标签： java"},{"title":"所有标签","date":"2019-03-10T06:13:01.754Z","updated":"2019-03-10T04:45:45.682Z","comments":true,"path":"tags/index.html","permalink":"https://willwang.top/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-03-10T08:57:40.694Z","updated":"2019-03-10T08:44:42.398Z","comments":true,"path":"assets/plugin/busuanzi/2.3/busuanzi.pure.mini.js","permalink":"https://willwang.top/assets/plugin/busuanzi/2.3/busuanzi.pure.mini.js","excerpt":"","text":"var bszCaller,bszTag;!function(){var c,d,e,a=!1,b=[];ready=function(c){return a||\"interactive\"===document.readyState||\"complete\"===document.readyState?c.call(document):b.push(function(){return c.call(this)}),this},d=function(){for(var a=0,c=b.length;c>a;a++)b[a].apply(document);b=[]},e=function(){a||(a=!0,d.call(window),document.removeEventListener?document.removeEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.detachEvent(\"onreadystatechange\",e),window==window.top&&(clearInterval(c),c=null)))},document.addEventListener?document.addEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.attachEvent(\"onreadystatechange\",function(){/loaded|complete/.test(document.readyState)&&e()}),window==window.top&&(c=setInterval(function(){try{a||document.documentElement.doScroll(\"left\")}catch(b){return}e()},5)))}(),bszCaller={fetch:function(a,b){var c=\"BusuanziCallback_\"+Math.floor(1099511627776*Math.random());window[c]=this.evalCall(b),a=a.replace(\"=BusuanziCallback\",\"=\"+c),scriptTag=document.createElement(\"SCRIPT\"),scriptTag.type=\"text/javascript\",scriptTag.defer=!0,scriptTag.src=a,document.getElementsByTagName(\"HEAD\")[0].appendChild(scriptTag)},evalCall:function(a){return function(b){ready(function(){try{a(b),scriptTag.parentElement.removeChild(scriptTag)}catch(c){bszTag.hides()}})}}},bszCaller.fetch(\"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback\",function(a){bszTag.texts(a),bszTag.shows()}),bszTag={bszs:[\"site_pv\",\"page_pv\",\"site_uv\"],texts:function(a){this.bszs.map(function(b){var c=document.getElementById(\"busuanzi_value_\"+b);c&&(c.innerHTML=a[b])})},hides:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"none\")})},shows:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"inline\")})}};"}],"posts":[{"title":"Deep Learning basics p5: Optimizing Models with TensorBoard","slug":"Deep-Learning-basics-p5-Optimizing-Models-with-TensorBoard","date":"2019-04-01T16:00:00.000Z","updated":"2019-04-02T13:30:52.289Z","comments":true,"path":"published/2019/04/02/Deep-Learning-basics-p5-Optimizing-Models-with-TensorBoard/","link":"","permalink":"https://willwang.top/published/2019/04/02/Deep-Learning-basics-p5-Optimizing-Models-with-TensorBoard/","excerpt":"本文主要内容： 加载自定义数据，并设置模型参数 优化参数，进行模型训练 查看训练状态","text":"本文主要内容： 加载自定义数据，并设置模型参数 优化参数，进行模型训练 查看训练状态 0 导入依赖包 1234567from tensorflow.keras.models import Sequentialfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flattenfrom tensorflow.keras.layers import Conv2D, MaxPooling2D# more info on callbakcs: https://keras.io/callbacks/ model saver is cool too.from tensorflow.keras.callbacks import TensorBoardimport pickleimport time 1 加载数据 123456789101112pickle_in = open(\"X.pickle\", \"rb\")X = pickle.load(pickle_in)pickle_in = open(\"y.pickle\", \"rb\")y = pickle.load(pickle_in)X = X / 255.0# 可以对参数进行调整dense_layers = [0, 1, 2]layer_sizes = [32, 64, 128]conv_layers = [1, 2, 3] 2 进行训练 123456789101112131415161718192021222324252627282930313233343536373839# 根据给定的模型参数，进行训练for dense_layer in dense_layers: for layer_size in layer_sizes: for conv_layer in conv_layers: NAME = \"&#123;&#125;-conv-&#123;&#125;-nodes-&#123;&#125;-dense-&#123;&#125;\".format(conv_layer, layer_size, dense_layer, int(time.time())) print(NAME) model = Sequential() # 可以调整输出的维度 layer_size model.add(Conv2D(layer_size, (3, 3), input_shape=X.shape[1:])) model.add(Activation('relu')) model.add(MaxPooling2D(pool_size=(2, 2))) for l in range(conv_layer - 1): model.add(Conv2D(layer_size, (3, 3))) model.add(Activation('relu')) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Flatten()) for _ in range(dense_layer): model.add(Dense(layer_size)) model.add(Activation('relu')) model.add(Dense(1)) model.add(Activation('sigmoid')) tensorboard = TensorBoard(log_dir=\"logs/&#123;&#125;\".format(NAME)) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'], ) model.fit(X, y, batch_size=32, epochs=3, validation_split=0.3, callbacks=[tensorboard]) 3 查看训练状态 12在终端输入命令，加载日志文件进行查看，主要对比各个参数的性能tensorboard --logdir=logs/ 原文：Optimizing Models with TensorBoard","categories":[{"name":"AI","slug":"AI","permalink":"https://willwang.top/categories/AI/"},{"name":"DL basic","slug":"AI/DL-basic","permalink":"https://willwang.top/categories/AI/DL-basic/"}],"tags":[{"name":"DL basic","slug":"DL-basic","permalink":"https://willwang.top/tags/DL-basic/"}]},{"title":"Deep Learning basics p3: Convolutional Neural Networks","slug":"Deep-Learning-basics-p3-Convolutional-Neural-Networks","date":"2019-03-29T16:00:00.000Z","updated":"2019-03-30T08:54:30.286Z","comments":true,"path":"published/2019/03/30/Deep-Learning-basics-p3-Convolutional-Neural-Networks/","link":"","permalink":"https://willwang.top/published/2019/03/30/Deep-Learning-basics-p3-Convolutional-Neural-Networks/","excerpt":"本文主要包括： 加载自定义数据 构建顺序模型，并对模型进行堆叠 配置学习过程 训练数据","text":"本文主要包括： 加载自定义数据 构建顺序模型，并对模型进行堆叠 配置学习过程 训练数据 0 导入依赖包 1234567from tensorflow.keras.models import Sequentialfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flattenfrom tensorflow.keras.layers import Conv2D, MaxPooling2Dimport pickle 1 加载数据。 12345678910# X为输入数据pickle_in = open(\"X.pickle\", \"rb\")X = pickle.load(pickle_in)# Y为标签pickle_in = open(\"Y.pickle\", \"rb\")Y = pickle.load(pickle_in)X = X/255.0# print(Y) 2 构建模型。 123456789101112131415161718192021222324model = Sequential()# 堆叠模型。# 2D卷积层 256表示输出空间的维度 ；(3, 3)表示2D卷积窗口的宽度和高度，单个数时，表示维度值相同；model.add(Conv2D(256, (3, 3), input_shape = X.shape[1:]))model.add(Activation('relu'))# MaxPooling2D,对空间数据的最大池化model.add(MaxPooling2D(pool_size=(2, 2)))model.add(Conv2D(256, (3, 3)))# 设置激活函数model.add(Activation('relu'))model.add(MaxPooling2D(pool_size=(2, 2)))# 调整为1D的特征向量model.add(Flatten())# 全连接层，设置输出空间维度，即输出数据的尺寸为（*， 64）model.add(Dense(64))model.add(Dense(1))# 设置激活函数sigmoidmodel.add(Activation('sigmoid')) 3 配置学习过程。 123456# 主要 配置优化器optimizer，损失函数loss及评估标准metricsmodel.compile(loss = 'binary_crossentropy', optimizer='adam', metrics = ['accuracy']) 4 训练模型。 1234# 对样本X, Y进行迭代，批处理样本数32；迭代次数3；作为验证集比例为0.3model.fit(X, Y, batch_size = 32, epochs = 1, validation_split = 0.3) 原文：Convolutional Neural Networks","categories":[{"name":"AI","slug":"AI","permalink":"https://willwang.top/categories/AI/"},{"name":"DL basic","slug":"AI/DL-basic","permalink":"https://willwang.top/categories/AI/DL-basic/"}],"tags":[{"name":"DL basic","slug":"DL-basic","permalink":"https://willwang.top/tags/DL-basic/"}]},{"title":"Deep Learning basics p4: Analyzing Models with TensorBoard","slug":"Deep-Learning-basics-p4-Analyzing-Models-with-TensorBoard","date":"2019-03-29T16:00:00.000Z","updated":"2019-03-30T09:29:02.357Z","comments":true,"path":"published/2019/03/30/Deep-Learning-basics-p4-Analyzing-Models-with-TensorBoard/","link":"","permalink":"https://willwang.top/published/2019/03/30/Deep-Learning-basics-p4-Analyzing-Models-with-TensorBoard/","excerpt":"本文主要包括： 加载自定义数据 构建顺序模型，并对模型进行堆叠 配置学习过程 训练数据 通过调用回调函数，查看训练过程的状态","text":"本文主要包括： 加载自定义数据 构建顺序模型，并对模型进行堆叠 配置学习过程 训练数据 通过调用回调函数，查看训练过程的状态 0 导入依赖包 1234567891011# import tensorflow as tf# from tensorflow.keras.datasets import cifar10# from tensorflow.keras.preprocessing.image import ImageDataGeneratorfrom tensorflow.keras.models import Sequentialfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flattenfrom tensorflow.keras.layers import Conv2D, MaxPooling2Dfrom tensorflow.keras.callbacks import TensorBoardimport pickleimport time 1 加载数据。 123456789NAME = \"Cats-vs-dogs-64x2-&#123;&#125;\".format(int(time.time()))pickle_in = open(\"X.pickle\",\"rb\")X = pickle.load(pickle_in)pickle_in = open(\"Y.pickle\",\"rb\")Y = pickle.load(pickle_in)X = X/255.0 2 构建模型。 123456789101112131415161718192021model = Sequential()# 堆叠模型# 2D卷积层 64表示输出空间的维度 (3, 3)表示2D卷积窗口的宽度和高度，单个数时，表示维度值相同model.add(Conv2D(64, (3, 3), input_shape=X.shape[1:]))model.add(Activation('relu'))model.add(MaxPooling2D(pool_size=(2, 2)))model.add(Conv2D(64, (3, 3)))model.add(Activation('relu'))model.add(MaxPooling2D(pool_size=(2, 2)))# 调整为1D的特征向量model.add(Flatten())model.add(Dense(64))model.add(Dense(1))model.add(Activation('sigmoid'))# 可视化配置，这里设置了日志tensorboard = TensorBoard(log_dir=\"logs/&#123;&#125;\".format(NAME)) 3 配置学习过程。 12345model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'], ) 4 训练模型。 1234567# 调用回调函数，可以查看训练模型的状态及统计信息model.fit(X, Y, batch_size=32, epochs=2, validation_split=0.3, callbacks=[tensorboard]) 5 查看训练状态。 123# 在终端输入命令，加载日志文件进行查看tensorboard --logdir=logs/ 原文：Analyzing Models with TensorBoard","categories":[{"name":"AI","slug":"AI","permalink":"https://willwang.top/categories/AI/"},{"name":"DL basic","slug":"AI/DL-basic","permalink":"https://willwang.top/categories/AI/DL-basic/"}],"tags":[{"name":"DL basic","slug":"DL-basic","permalink":"https://willwang.top/tags/DL-basic/"}]},{"title":"CentOS6.5 配置Iptables","slug":"CentOS6-5-配置Iptables","date":"2019-03-23T16:00:00.000Z","updated":"2019-03-24T09:11:36.356Z","comments":true,"path":"published/2019/03/24/CentOS6-5-配置Iptables/","link":"","permalink":"https://willwang.top/published/2019/03/24/CentOS6-5-配置Iptables/","excerpt":"要求：内网服务器需要进行访问限制，配置防火墙可以方便、简单地实现功能。如开放某个服务或其他特定端口，允许一段ip地址访问，禁止另一段ip地址访问。","text":"要求：内网服务器需要进行访问限制，配置防火墙可以方便、简单地实现功能。如开放某个服务或其他特定端口，允许一段ip地址访问，禁止另一段ip地址访问。 1. 确定开启的服务及端口HTTP (TCP on port 80), HTTPS (TCP on port 443), SSH (TCP on port 22 by default), NTP (UDP on port 123), DNS (TCP and UDP on port 53), ping (ICMP),telnet(23),ftp (21,20,1024),mysql (3306),mongo (27017) iptables配置文件路径： /etc/sysconfig/iptables 2. 配置规则1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# 查看iptables配置信息iptables -L -n# 清除配置规则 -F: 清除默认所有, -X:清除自定义, -Z:清空计数器值iptables -F; iptables -X; iptables -Z# 允许本地回环访问iptables -A INPUT -i lo -j ACCEPTiptables -A INPUT -d 127.0.0.0/8 -j REJECT# 阻止通用攻击iptables -A INPUT -p tcp ! --syn -m state --state NEW -j DROPiptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROPiptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP# 允许已建立的入站连接iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT# 允许http和httpsiptables -A INPUT -p tcp --dport 80 -j ACCEPTiptables -A INPUT -p tcp --dport 443 -j ACCEPT# 允许sshiptables -A INPUT -p tcp --dport 22 -j ACCEPT# 允许ntpiptables -A INPUT -p udp --dport 123 -j ACCEPT# 允许dnsiptables -A INPUT -p udp --dport 53 -j ACCEPTiptables -A INPUT -p tcp --dport 53 -j ACCEPT# 允许ping包iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT# 允许telnetiptables -A INPUT -p tcp --dport 23 -j ACCEPT# 允许ftp 21:ftp 20:active mode 1024:Passive modeiptables -A INPUT -p tcp --dport 20 -j ACCEPTiptables -A INPUT -p tcp --dport 21 -j ACCEPTiptables -A INPUT -p tcp --dport 1024 -j ACCEPT# 允许mysqliptables -A INPUT -p tcp --dport 3306 -j ACCEPT# 允许mongoiptables -A INPUT -p tcp --dport 27017 -j ACCEPT# 允许特定ip+port访问iptables -A INPUT -p tcp -s 192.168.1.78 --dport 22 -j ACCEPT# 禁止特定ip+其他端口访问(注意：禁止其他端口需要在允许特定端口之后配置)iptables -A INPUT -p tcp -s 192.168.1.78 -j DROP# 允许多个ip访问iptables -A INPUT -i eth1 -m iprange --src-range 192.168.1.81-192.168.1.90 -j ACCEPTiptables -A INPUT -i eth1 -s 192.168.1.0/24 -j ACCEPT# 阻止多个ip访问iptables -A INPUT -m iprange --src-range 192.168.1.71-192.168.1.80 -j DROP#封停一个IP，-I是插入到最前面iptables -I INPUT -s 192.168.1.78 -j DROP#要解封一个IPiptables -D INPUT -s 192.168.1.78 -j DROP# 设置默认规则# 丢掉其他入站包，允许所有出栈包，丢掉所有转发包iptables -P INPUT DROPiptables -P OUTPUT ACCEPTiptables -P FORWARD DROP 3. 保存1234# 保存配置service iptables save# 重启服务service iptables restart 4. 其他相关命令4.1 修改规则1234567# 查看需要删除的规则及序号iptables -L -n --line-number# 删除指定端口规则对应的序列号iptables -D INPUT 5# 确认是否删除iptables -L -n --line-number# 重新配置 4.2 iptables相关命令123456# 开机自启/关闭chkconfig iptables on|off# 启动/关闭/重启 服务service iptables start|stop|restart# 查看状态service iptables status 5. iptables帮助命令12345678910111213141516171819202122232425262728293031323334353637383940414243iptables(选项)(参数)-t&lt;表&gt;：指定要操纵的表；-A：向规则链中添加或追加条目；-D：从规则链中删除条目；-i：向规则链中插入条目；-R：替换规则链中的条目；-L：显示规则链中已有的条目；-F：清楚规则链中已有的条目；-Z：清空规则链中的数据包计算器和字节计数器；-N：创建新的用户自定义规则链；-P：定义规则链中的默认目标；-h：显示帮助信息；-p：指定要匹配的数据包协议类型；-s：指定要匹配的数据包源ip地址；-j&lt;目标&gt;：指定要跳转的目标；-i&lt;网络接口&gt;：指定数据包进入本机的网络接口；-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。iptables命令选项输入顺序：iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作表名包括：raw：高级功能，如：网址过滤。mangle：数据包修改（QOS），用于实现服务质量。net：地址转换，用于网关路由器。filter：包过滤，用于防火墙规则，默认为filter。规则链名包括：INPUT链：处理输入数据包。OUTPUT链：处理输出数据包。PORWARD链：处理转发数据包。PREROUTING链：用于目标地址转换（DNAT）。POSTOUTING链：用于源地址转换（SNAT）。动作包括：accept：接收数据包。DROP：丢弃数据包。REDIRECT：重定向、映射、透明代理。SNAT：源地址转换。DNAT：目标地址转换。MASQUERADE：IP伪装（NAT），用于ADSL。LOG：日志记录。 6. Ref iptables命令 Setup IPTables Firewall on CentOS 6 How To Set Up a Firewall Using FirewallD on CentOS 7 Changing Your SSH Port For Extra Security on CentOS 6 or 7","categories":[{"name":"Linux","slug":"Linux","permalink":"https://willwang.top/categories/Linux/"},{"name":"linux配置","slug":"Linux/linux配置","permalink":"https://willwang.top/categories/Linux/linux配置/"}],"tags":[{"name":"iptables","slug":"iptables","permalink":"https://willwang.top/tags/iptables/"}]},{"title":"Deep Learning basics p2:loading custom data","slug":"Deep-Learning-basics-p2-loading-custom-data","date":"2019-03-23T16:00:00.000Z","updated":"2019-03-24T10:21:29.113Z","comments":true,"path":"published/2019/03/24/Deep-Learning-basics-p2-loading-custom-data/","link":"","permalink":"https://willwang.top/published/2019/03/24/Deep-Learning-basics-p2-loading-custom-data/","excerpt":"本文主要包括： 获取微软的猫和狗的数据集，显示数据集信息 通过数据集构建训练数据 对训练数据进行处理，构建自定义模型注意：本文代码可以在Jupyter Notebook上顺序执行。","text":"本文主要包括： 获取微软的猫和狗的数据集，显示数据集信息 通过数据集构建训练数据 对训练数据进行处理，构建自定义模型注意：本文代码可以在Jupyter Notebook上顺序执行。 0 导入依赖包 1234567891011import numpy as npimport matplotlib.pyplot as pltimport osimport cv2from tqdm import tqdmimport randomimport pickle# 设置变量DATADIR = \"G:\\Resources\\datasets\\dataCatDog\\PetImages\"CATEGORIES = [\"Dog\", \"Cat\"] 1 读取原始图片 1234567891011121314for category in CATEGORIES: #分类 path = os.path.join(DATADIR, category) #创建狗和猫的路径 for img in os.listdir(path): #迭代所有图片 img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE) #读取并转化为数组 plt.imshow(img_array, cmap='gray') #设置配色方案 plt.show() #显示 break #仅仅显示一个 break #仅仅显示第一类# 打印print(img_array)# 显示大小print(img_array.shape) 2 重新设置大小 12345IMG_SIZE = 50new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))plt.imshow(new_array, cmap='gray')plt.show() 3 构建训练数据集 1234567891011121314151617181920212223training_data = []def create_training_data(): for category in CATEGORIES: path = os.path.join(DATADIR, category) # 获取分类类别索引 0:dog, 1:cat class_num = CATEGORIES.index(category) for img in tqdm(os.listdir(path)): try: # 读取图片，并保存为array img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE) # 重置大小并保存 new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE)) # 将新分类添加到训练数据 training_data.append([new_array, class_num]) # 捕获异常，防止出现异常 except Exception as e: pass# 调用训练数据create_training_data()print(len(training_data)) 4 对训练集进行随机排序 12345random.shuffle(training_data)# 通过遍历，确认随机排序结果for sample in training_data[:10]: print(sample[1]) 5 构建模型 12345678910X = []Y = []for features, label in training_data: X.append(features) Y.append(label)# 重构张量为目标尺寸元组，其中存储的内容不会改变print(X[0].reshape(-1, IMG_SIZE, IMG_SIZE, 1))X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1) 6 保存模型数据 12345678# 保存Xpickle_out = open(\"X.pickle\",\"wb\")pickle.dump(X, pickle_out)pickle_out.close()# 保存Ypickle_out = open(\"Y.pickle\",\"wb\")pickle.dump(Y, pickle_out)pickle_out.close() 7 读取X 1234pickle_in = open(\"X.pickle\", \"rb\")X = pickle.load(pickle_in)# 显示X[1] 原文：Loading in your own data","categories":[{"name":"AI","slug":"AI","permalink":"https://willwang.top/categories/AI/"},{"name":"DL basic","slug":"AI/DL-basic","permalink":"https://willwang.top/categories/AI/DL-basic/"}],"tags":[{"name":"DL basic","slug":"DL-basic","permalink":"https://willwang.top/tags/DL-basic/"}]},{"title":"Deep Learning basics p1: Introduction to Deep Learning","slug":"Deep-Learning-basics-p1-Introduction-to-Deep-Learning","date":"2019-03-19T16:00:00.000Z","updated":"2019-03-24T09:16:08.509Z","comments":true,"path":"published/2019/03/20/Deep-Learning-basics-p1-Introduction-to-Deep-Learning/","link":"","permalink":"https://willwang.top/published/2019/03/20/Deep-Learning-basics-p1-Introduction-to-Deep-Learning/","excerpt":"通过python、Tensorflow和Keras框架实现的深度学习实例。本文是深度学习的快速入门的第一章，简单介绍神经网络的实现原理，利用tensorflow，采用Keras模型对mnist数据集进行构建，训练和预测流程的简单实现。","text":"通过python、Tensorflow和Keras框架实现的深度学习实例。本文是深度学习的快速入门的第一章，简单介绍神经网络的实现原理，利用tensorflow，采用Keras模型对mnist数据集进行构建，训练和预测流程的简单实现。 简单总结下，不一定正确，只为加深印象。一般包括以下几个步骤： 导包 实例化数据集 建立模型 配置学习模型 训练模型 测试样本 保存模型 进行预测 示例代码如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# 1 导包import tensorflow as tf #deep learning library. Tensors are just multi-dimensional arraysimport matplotlib.pyplot as pltimport numpy as np# 2 实例化数据集mnist = tf.keras.datasets.mnist # mnist is a dataset of 28x28 images of handwritten digits and their labels(x_train, y_train), (x_test, y_test) = mnist.load_data() # unpacks images to x_train/x_test and labels to y_train/y_test# print(x_train[0])# 归一化处理，使取值范围在[0, 1]或[-1, 1]x_train = tf.keras.utils.normalize(x_train, axis=1) # scales data between 0 and 1x_test = tf.keras.utils.normalize(x_test, axis=1)# print(x_train[0])# imshow是设置图片的展示，cmap意思是color map，颜色方案，binary代表是白底黑字；# plt.imshow(x_train[0], cmap = plt.cm.binary)# plt.show()# 3 建立模型model = tf.keras.models.Sequential() # a basic feed-forward modelmodel.add(tf.keras.layers.Flatten()) # flatten date ,takes our 28x28 and makes it 1x784 ## Adds a densely-connected layer with 128 units to the model:model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))# Add a softmax layer with 10 output units:model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))# 4 配置学习模型model.compile(optimizer='adam', # Good default optimizer to start with #优化器 loss='sparse_categorical_crossentropy',# how will we calculate our \"error.\" Neural network aims to minimize loss. #优化期间最小化的函数 # sparse: 稀疏的 categorical:绝对的，无条件的，分类的 crossentropy:交叉熵 metrics=['accuracy']) # what to track #用于监控训练# 5 训练模型 循环轮次：3model.fit(x_train, y_train, epochs=3) # train the model# 6 测试样本val_loss, val_acc = model.evaluate(x_test, y_test) # evaluate the out of sample data with modelprint(val_loss) # model's loss (error)print(val_acc) # model's accuracy# 7 保存model.save('epic_num_reader.model')# 重新实例化模型，会创建一个完全一样的模型new_model = tf.keras.models.load_model('epic_num_reader.model')# 8 预测predictions = new_model.predict(x_test)print(predictions)# 显示数字print(np.argmax(predictions[0]))# 显示数字图像plt.imshow(x_test[0], cmap = plt.cm.binary)plt.show() 原文：Introduction to Deep Learning - Deep Learning basics with Python, TensorFlow and Keras p.1","categories":[{"name":"AI","slug":"AI","permalink":"https://willwang.top/categories/AI/"},{"name":"DL basic","slug":"AI/DL-basic","permalink":"https://willwang.top/categories/AI/DL-basic/"}],"tags":[{"name":"DL basic","slug":"DL-basic","permalink":"https://willwang.top/tags/DL-basic/"}]},{"title":"win7下安装Anaconda3和tensorflow","slug":"win7下安装Anaconda3和tensorflow","date":"2019-03-18T16:00:00.000Z","updated":"2019-03-24T09:19:00.135Z","comments":true,"path":"published/2019/03/19/win7下安装Anaconda3和tensorflow/","link":"","permalink":"https://willwang.top/published/2019/03/19/win7下安装Anaconda3和tensorflow/","excerpt":"win7搭建Anaconda3及tensorflow环境其中：本地python为v3.6.5, Anaconda3为Anaconda3-5.2.0-Windows-x86_64","text":"win7搭建Anaconda3及tensorflow环境其中：本地python为v3.6.5, Anaconda3为Anaconda3-5.2.0-Windows-x86_64 1 安装pythonpython3和python2环境变量共存设置1%Python3%;%Python3%\\Scripts;%Python2%;%Python2%\\Scripts; 2 安装及配置pip安装及升级python -m pip install –upgrade pip 国内pip源清华：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：http://mirrors.aliyun.com/pypi/simple/中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/华中理工大学：http://pypi.hustunique.com/山东理工大学：http://pypi.sdutlinux.org/豆瓣：http://pypi.douban.com/simple/ 更改pip源windows环境下，添加或修改为：C:\\Users\\will\\pip\\pip.ini12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple linux环境下,添加或修改为：$HOME/pip/pip.conf12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple 3 安装及配置Anaconda33.1 下载Anaconda3Anaconda3-5.2.0,进行安装 3.2 配置Anaconda3环境变量新建系统变量：ANACONDA3 为 C:/MyProgramFiles/Anaconda3在Path添加1%ANACONDA3%;%ANACONDA3%/Library/mingw-w64/bin;%ANACONDA3%/Library/bin;%ANACONDA3%/Scripts; 参考后，目前没有配置：%ANACONDA3%/Library/usr/bin，原因：没找到路径,可能是win没有。 测试是否配置成功：命令行下输入:conda 3.3 登录jupyter运行Jupyter Notebook。看到http://localhost:8888/?token=...表示成功 3.4 修改coanda包管理源123conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes 可能有用，coanda删除源1coanda config --remove channels https://error…… 4 安装tensorflowtensorflow版本分为： CPU版本：pip3 install –upgrade tensorflow GPU版本：pip3 install –upgrade tensorflow-gpu（电脑不支持） 安装cpu版本pip install –upgrade tensorflow tensorflow安装成功测试12345python&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; hello = tf.constant('Hello, TensorFlow!')&gt;&gt;&gt; sess = tf.Session()&gt;&gt;&gt; print(sess.run(hello)) Ref Anaconda安装与环境配置 TensorFlow在Windows环境下的搭建","categories":[{"name":"AI","slug":"AI","permalink":"https://willwang.top/categories/AI/"},{"name":"环境搭建","slug":"AI/环境搭建","permalink":"https://willwang.top/categories/AI/环境搭建/"}],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://willwang.top/tags/环境搭建/"}]},{"title":"Welcome to my blog","slug":"welcome","date":"2019-03-09T16:00:00.000Z","updated":"2019-03-10T04:39:26.443Z","comments":true,"path":"published/2019/03/10/welcome/","link":"","permalink":"https://willwang.top/published/2019/03/10/welcome/","excerpt":"","text":"欢迎访问我的博客，希望留下你美丽的足记。","categories":[],"tags":[{"name":"欢迎","slug":"欢迎","permalink":"https://willwang.top/tags/欢迎/"}]},{"title":"CentOS6.5下搭建mongodb主、从、仲裁节点副本集实践","slug":"CentOS6-5下搭建mongodb主、从、仲裁节点副本集实践","date":"2019-03-09T16:00:00.000Z","updated":"2019-03-10T08:11:21.881Z","comments":true,"path":"published/2019/03/10/CentOS6-5下搭建mongodb主、从、仲裁节点副本集实践/","link":"","permalink":"https://willwang.top/published/2019/03/10/CentOS6-5下搭建mongodb主、从、仲裁节点副本集实践/","excerpt":"准备工作： 下载mongodb，本次实践版本号mongodb-linux-x86_64-2.6.7.tgz 设置防火墙为允许 准备好配置文件，及生成keyFile文件，开启keyFile就相当于开启auth","text":"准备工作： 下载mongodb，本次实践版本号mongodb-linux-x86_64-2.6.7.tgz 设置防火墙为允许 准备好配置文件，及生成keyFile文件，开启keyFile就相当于开启auth 1 设置配置文件，及生成keyFile文件1.1 设置配置文件主节点/usr/local/mongodb_master/mongodb_master.conf123456789dbpath=/storage/mongodb/masterlogpath=/usr/local/mongodb_master/logs/mongodb.logdirectoryperdb=port=27017maxConns=500smallfiles=truefork=replSet=rs1#keyFile=/usr/local/mongodb_master/keyFile注意：smallfiles= 是设置最小存储空间，用于自测试配置配置文件中：#keyFile=/usr/local/mongodb_master/keyFile，初始时注销掉，不启用备节点/usr/local/mongodb_master/mongodb_slave.conf123456789dbpath=/storage/mongodb/slavelogpath=/usr/local/mongodb_master/logs/mongodb.logdirectoryperdb=port=27018maxConns=500smallfiles=fork=replSet=rs1#keyFile=/usr/local/mongodb_slave/keyFile仲裁节点/usr/local/mongodb_master/mongodb_arbiter.conf123456789dbpath=/storage/mongodb/arbiterlogpath=/usr/local/mongodb_arbiter/logs/mongodb.logdirectoryperdb=port=27019maxConns=500smallfiles=fork=replSet=rs1#keyFile=/usr/local/mongodb_arbiter/keyFile 1.2 生成keyFile文件keyFile文件的作用： 集群之间的安全认证，增加安全认证机制KeyFile（开启keyfile认证就默认开启了auth认证） openssl rand -base64 741 &gt; keyFile #生成keyFile chmod 600 keyFile #设置权限，不能太大 scp –r keyFile root@host:/usr/local/mongodb_arbiter/keyFile ## 复制到所有节点 2 初始化副本集2.1 初始化单点初始化：123456rscfg = &#123; _id:\"rs1\", members:[&#123; _id:0, host:\"192.168.1.78:27017\"&#125;]&#125;rs.initiate( rscfg ) 多节点初始化:12345678rscfg = &#123; _id:\"rs1\", members:[&#123; _id:0, host:\"192.168.1.71:27017\", priority:2&#125;,&#123; _id:1, host:\"192.168.1.82:27018\", priority:1&#125;,&#123; _id:2, host:\"192.168.1.71:27019\", arbiterOnly:true&#125;]&#125;rs.initiate( rscfg ) 2.2 单节点初始化后：添加、删除节点操作123456789添加secondary：rs.add(&#123;host: \"192.168.1.78:27018\", priority: 1 &#125;)添加仲裁点：rs.addArb(\"192.168.1.78:27019\")移除节点：rs.remove(&#123;host: \"192.168.1.78:27019\"&#125;)重置节点权限：conf=rscfg.conf()conf.members[0].priority=2rs.reconfig(config)查看集群配置：rs.conf();查看集群状态：rs.status(); 3 添加管理员用户及普通用户,并进行验证(在rs1:PRIMARY上操作)注意：需要在主节点(PRIMARY)操作;帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)创建用户管理员:123456789admin = db.getSiblingDB(\"admin\"); #其中getSiblingDB为获取另一个数据库对象admin.createUser( &#123; user: \"admin\", pwd: \"admin\", roles: [ &#123; role: \"userAdminAnyDatabase\", db: \"admin\" &#125; ] &#125;)admin.auth(\"admin\", \"admin\" ); 创建集群管理员:12345678admin.createUser( &#123; user: \"username\", pwd: \"pwd\", roles: [ &#123; role: \"clusterAdmin\", db: \"admin\" &#125; ] &#125;)admin.auth(\"username\", \"pwd\" ); 其他用户相关操作 更新用户：db.getSiblingDB(“admin”);updateUser(“username”,{roles: [ { role: “userAdminAnyDatabase”, db: “admin” } ]}) 验证用户：db.getSiblingDB(“admin”).auth(“username”, “pwd” ) 修改密码：db.changeUserPassword(“username”,”pwd”); 集群及其他角色授权： 1234db.grantRolesToUser( \"admin\" , [ &#123; \"role\": \"clusterAdmin\", \"db\": \"admin\" &#125;,&#123; \"role\": \"userAdminAnyDatabase\", \"db\": \"admin\" &#125;,&#123; \"role\": \"dbAdminAnyDatabase\", \"db\": \"admin\" &#125;,&#123; role: \"root\", db: \"admin\" &#125; ]) 如果是admin，可以额外添加： 1&#123; role: \"dbOwner\", db: \"admin\" &#125; 加上dbOwner可以直接操作其他数据库如replSetTest，不需要重新认证 db.auth(‘admin’,’admin’) 4 重启集群由于关闭主节点，则主节点状态会切到副本集中的从节点，因此，先关闭从节点，最后关闭主节点。db.getSiblingDB(“admin”).shutdownServer(); 或ps -ef | grep mongo, kill +pid 取消所有节点配置文件中的注释，keyFile=/usr/local/mongodb_arbiter/keyFile重新启动服务 如果启动异常，删除mongo.lock, rm -f mongo.lock，重新启动 5 验证登录主节点：12345rs1:PRIMARY&gt;rs.status();显示：not authorized for queryrs1:PRIMARY&gt;db.getSiblingDB(\"admin\").auth(\"username\", \"pwd\" );授权后，可进行操作rs1:PRIMARY&gt;db.t1.insert(&#123;\"name\":\"zs\",\"age\":11&#125;) 登录从节点查看是否同步：12345rs1:SECONDARY&gt;db.t1.find() #显示：not authorized for query on test.t1\"rs1:SECONDARY&gt;db.getSiblingDB(\"admin\").auth(\"username\", \"pwd\" ); #验证rs1:SECONDARY&gt;db.t1.find(); #not master and slaveOk=false\"rs1:SECONDARY&gt;db.setSlaveOk(); #读权限rs1:SECONDARY&gt;db.t1.find(); #查询所有记录 注意：授权操作过程 rs1:PRIMARY&gt;rs.conf() # 访问异常,not authorized for query on test.t1”rs1:PRIMARY&gt;use admin #切换数据库rs1:PRIMARY&gt;db.auth(“username”, “pwd” ); #授权rs1:PRIMARY&gt;use test #切换其他库rs1:PRIMARY&gt;rs.conf() #正常访问 6 java测试副本集连接代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class TestMongo&#123; private static MongoClient mongoClient = null; public DB getDB() throws UnknownHostException &#123; DB conn = null; if (mongoClient == null) &#123; intializeMongoClient(); &#125; conn = mongoClient.getDB(\"testdb\"); return conn; &#125; private static void intializeMongoClient() throws UnknownHostException &#123; MongoClientURI mongoClientURI = new MongoClientURI(\"mongodb://username:pwd@192.168.1.78: 27017,192.168.1.78: 27018,192.168.1.78: 27019/admin\");// MongoClientURI mongoClientURI = new MongoClientURI(\"mongodb://192.168.1.78: 27017\"); mongoClient = new MongoClient(mongoClientURI); &#125; public synchronized void closeConnection() &#123; if (mongoClient != null) &#123; mongoClient.close(); &#125; &#125; public static void main(String[] args) &#123; TestMongo testMongo = new TestMongo(); DBObject content=new BasicDBObject(); content.put(\"name\",\"北京4\"); content.put(\"type\",\"首都\"); try &#123; DB db = testMongo.getDB(); DBCollection collection=db.getCollection(\"n1\"); collection.insert(content); long count = collection.getCount(); System.out.println(count); testMongo.closeConnection(); &#125; catch (UnknownHostException e) &#123; e.printStackTrace(); &#125; &#125;&#125; Ref Enforce Keyfile Access Control in a Replica Set Enable Authentication in a Sharded Cluster mongodb之replSet复制集 + auth mongodb副本集用户权限设置 Mongodb集群搭建及spring和java连接配置记录","categories":[{"name":"数据库","slug":"数据库","permalink":"https://willwang.top/categories/数据库/"},{"name":"mongodb","slug":"数据库/mongodb","permalink":"https://willwang.top/categories/数据库/mongodb/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"https://willwang.top/tags/mongodb/"}]}]}