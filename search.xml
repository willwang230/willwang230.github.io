<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>五一华山看日出</title>
      <link href="/published/2019/05/04/%E4%BA%94%E4%B8%80%E5%8D%8E%E5%B1%B1%E7%9C%8B%E6%97%A5%E5%87%BA/"/>
      <url>/published/2019/05/04/%E4%BA%94%E4%B8%80%E5%8D%8E%E5%B1%B1%E7%9C%8B%E6%97%A5%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>这次游华山，看日出的简单记录。附带急行军时刻表，有没有比我用时还短的伙伴。</p><a id="more"></a><blockquote><h2 id="0-准备"><a href="#0-准备" class="headerlink" title="0    准备"></a>0    准备</h2></blockquote><ul><li>一人，一背包，花费54.5 + 160（门票） + 140（索道） + 40 + 35=429.5（路费+门票）其他 = 65 总共495。</li><li>矿泉水两瓶，巧克力饼干，苹果一个，其他小饼干，小面包多个。</li><li>手套，爬山抓提链，防止磨出水泡，舒适的衣服，如果在山上等待日出，最好自带大衣。</li><li>如果需要防晒，拍照，所需自备。我的自拍杆还是华山下买的。</li><li>参考，网友的游记，在马蜂窝有很多。这里记录一个我参考过的，有手绘地图，我就是下载了地图，真的很方便。<a href="http://www.mafengwo.cn/i/5473924.html。" target="_blank" rel="noopener">http://www.mafengwo.cn/i/5473924.html。</a></li><li>重要目标：5-6点，东峰看日出。</li></ul><blockquote><h2 id="1-留下记录"><a href="#1-留下记录" class="headerlink" title="1    留下记录"></a>1    留下记录</h2></blockquote><p>华山门楼处，打开开始。<br><img src="/img/2019/05/IMG_20190501_202031.jpg" alt=""></p><p>初见太阳<br><img src="/img/2019/05/IMG_20190502_055527.jpg" alt=""><br>朦胧的感觉<br><img src="/img/2019/05/IMG_20190502_055546.jpg" alt=""><br>可以看到半边脸<br><img src="/img/2019/05/IMG_20190502_055725.jpg" alt=""><br>看到完全的光辉<br><img src="/img/2019/05/IMG_20190502_055915.jpg" alt=""><br>周围完全被照亮<br><img src="/img/2019/05/IMG_20190502_060032.jpg" alt=""><br>熠熠夺目<br><img src="/img/2019/05/IMG_20190502_060224.jpg" alt=""></p><p>再来一张华山论剑<br><img src="/img/2019/05/IMG_20190502_073016.jpg" alt=""><br>华山西峰索道也是要感受一番<br><img src="/img/2019/05/IMG_20190502_090443.jpg" alt=""></p><blockquote><h2 id="2-个人总结"><a href="#2-个人总结" class="headerlink" title="2    个人总结"></a>2    个人总结</h2></blockquote><p>一般人说，五一人太多，不适合爬山，其实，人多了，爬山也就没那么累了，人流推着你前进，感觉特爽。旅游前，准备准备游玩路线什么的，比如，我参考了网友的，大概准备了如下路线。<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">爬山路线：</span><br><span class="line">玉泉院 —<span class="comment">(约 4 h)</span> —&gt; 北峰—<span class="comment">(约 2h)</span>  —&gt;金锁关—<span class="comment">(约 3h)</span>—&gt; 四峰——&gt;返回</span><br><span class="line"></span><br><span class="line">重要景点：</span><br><span class="line"><span class="number">1</span>，千尺幢，百尺峡，老君犁沟</span><br><span class="line"><span class="number">2</span>，擦耳崖</span><br><span class="line"><span class="number">3</span>，中峰——&gt;东峰<span class="comment">(朝阳台看日出，鹞子翻身，下棋亭，南天门，长空栈道，)</span>——&gt;南峰<span class="comment">(即落雁峰即最高峰，)</span>——&gt;西峰<span class="comment">(即莲花峰，)</span></span><br><span class="line"><span class="number">4</span>，返回，</span><br><span class="line">法一：西峰索道<span class="comment">(首选)</span>；法二：回中峰原路回；法三：走北峰，智取华山下</span><br></pre></td></tr></table></figure></p><p>因为在中间有可能会有通往其他地方的岔路，这时，如果有个即使简单的规划，查看下地图，也不会迷失的。加油。衣服记得穿舒适的，主要是万一蹭到，不至于摩擦伤口。还有等旅游专车，这个是真心花费时间，且人多，每人5块，只有一辆车去玉泉院，所以可以选择坐去玉泉院的出租，省时，可以讨价到10块。中间休息什么的，不用担心，爬一段就有亭子，由于一个人，自己也就没怎么休息，中间休息了两次，每次5-10分钟。如果，爬山模仿背东西爬山的方式，不是很累。还有就是看日出，官方时间是5:48:34，这有点误差，感觉多等个20分钟，这中间一直期盼看到日出，很是有感。最后，什么青春啊、什么时间啊、你去做过感受过才值得，珍惜每一时刻。</p><blockquote><h2 id="3-个人游玩时刻表"><a href="#3-个人游玩时刻表" class="headerlink" title="3    个人游玩时刻表"></a>3    个人游玩时刻表</h2></blockquote><table><thead><tr><th>时刻</th><th>事件</th></tr></thead><tbody><tr><td>17:21</td><td>西安北站</td></tr><tr><td>18:05</td><td>到华山北站</td></tr><tr><td>19:06</td><td>开始滴雨</td></tr><tr><td>19:08</td><td>坐上去玉泉院公交</td></tr><tr><td>8:00</td><td>吃完饭，出发</td></tr><tr><td>8:20</td><td>打卡开始</td></tr><tr><td>8:40</td><td>检票进山</td></tr><tr><td>8:50</td><td>走了10分钟，感觉已经有点热</td></tr><tr><td>9:00</td><td>五里关</td></tr><tr><td>9:25</td><td>菠萝坪</td></tr><tr><td>9:50</td><td>毛女洞</td></tr><tr><td>10:12</td><td>响水石</td></tr><tr><td>10:22</td><td>云门</td></tr><tr><td>10:48</td><td>回心石</td></tr><tr><td></td><td>千尺幢</td></tr><tr><td>11:32</td><td>天仙洞</td></tr><tr><td>12:10</td><td>犁沟门，去北峰路口直接去东峰观日出</td></tr><tr><td>1:15</td><td>苍龙岭</td></tr><tr><td>1:56</td><td>金锁关</td></tr><tr><td>2:20</td><td>云梯</td></tr><tr><td>2:45</td><td>东峰顶</td></tr><tr><td>3:00</td><td>二号观日台，等待日出，此时观日台基本没有坐的地方</td></tr><tr><td>3:10</td><td>开始有点滴雨，不过，附近的人都还在哦</td></tr><tr><td>5:55</td><td>开始出现太阳</td></tr><tr><td>6:04</td><td>观日出结束</td></tr><tr><td>6:42</td><td>三公山，华山论剑</td></tr><tr><td>6:58</td><td>太上老君炼丹</td></tr><tr><td>7:03</td><td>南天门，长空栈道，仅打卡</td></tr><tr><td>7:30</td><td>南峰顶，华山论剑</td></tr><tr><td>8:00</td><td>西峰</td></tr><tr><td>9:20</td><td>下西峰索道</td></tr><tr><td>10:30</td><td>华山汽车站-西安纺织城</td></tr><tr><td>12:11</td><td>到达西安</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 游玩 </category>
          
          <category> 华山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬山 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7下nexus 3.16 安装、配置、批量导入本地maven包及开机自启设置</title>
      <link href="/published/2019/05/03/Centos7%E4%B8%8Bnexus-3-16-%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E6%9C%AC%E5%9C%B0maven%E5%8C%85%E5%8F%8A%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E8%AE%BE%E7%BD%AE/"/>
      <url>/published/2019/05/03/Centos7%E4%B8%8Bnexus-3-16-%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E6%9C%AC%E5%9C%B0maven%E5%8C%85%E5%8F%8A%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>本文包括：<br>nexus 3.16 安装、配置，批量导入本地maven包及开机自启设置。</p><a id="more"></a><blockquote><h2 id="0-准备"><a href="#0-准备" class="headerlink" title="0    准备"></a>0    准备</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">配置<span class="selector-tag">java</span>环境，<span class="selector-tag">jdk1</span><span class="selector-class">.8</span></span><br><span class="line">配置<span class="selector-tag">Maven</span>环境，<span class="selector-tag">maven-3</span><span class="selector-class">.6</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="1-下载nexus"><a href="#1-下载nexus" class="headerlink" title="1    下载nexus"></a>1    下载nexus</h2></blockquote><p>下载：<br><a href="https://sonatype-download.global.ssl.fastly.net/repository/repositoryManager/3/nexus-3.16.1-02-unix.tar.gz，如nexus-3.16.1-02-unix.tar.gz" target="_blank" rel="noopener">https://sonatype-download.global.ssl.fastly.net/repository/repositoryManager/3/nexus-3.16.1-02-unix.tar.gz，如nexus-3.16.1-02-unix.tar.gz</a><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nexus<span class="number">-3.16</span><span class="number">.1</span><span class="number">-02</span>-unix.tar.gz -c /opt/</span><br><span class="line">mv /opt/nexus<span class="number">-3.16</span><span class="number">.1</span> /opt/nexus</span><br></pre></td></tr></table></figure></p><blockquote><h2 id="2-启动"><a href="#2-启动" class="headerlink" title="2    启动"></a>2    启动</h2></blockquote><h3 id="2-1-启动nexus"><a href="#2-1-启动nexus" class="headerlink" title="2.1 启动nexus"></a>2.1 启动nexus</h3><p>cd /opt/nexus/nexus-3.16.1-02/bin/<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./nexus</span> <span class="comment">#查看启动命令</span></span><br><span class="line"><span class="string">./nexus</span> start <span class="comment">#后台启动</span></span><br><span class="line"><span class="string">./nexus</span> run <span class="comment">#前台启动，显示启动日志</span></span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：如果是在虚拟机环境，需要剩余磁盘空间大于4g ，否则不能启动</p><p>修改为以root方式启动<br>vi nexus.rc<br>修改为：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">RUN_AS_USER</span>=<span class="string">"root"</span></span><br></pre></td></tr></table></figure></p><h3 id="2-2-nexus-新建第三方仓库"><a href="#2-2-nexus-新建第三方仓库" class="headerlink" title="2.2 nexus 新建第三方仓库"></a>2.2 nexus 新建第三方仓库</h3><p>配置 -&gt; Repositories -&gt; Create Repository -&gt; maven(hosted) -&gt; thirdparty(name) -&gt; Mixed(version policy), Allow redeploy(Deployment policy) -&gt; Create repository</p><blockquote><h2 id="3-nexus-批量导入本地包"><a href="#3-nexus-批量导入本地包" class="headerlink" title="3    nexus 批量导入本地包"></a>3    nexus 批量导入本地包</h2></blockquote><p>新建本地临时repo目录，转入需要导入的maven包</p><p>编辑导入包执行的脚本<br>vi mavenimport.sh</p><figure class="highlight bash"><figcaption><span>mavenimport.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># copy and run this script to the root of the repository directory containing files</span></span><br><span class="line"><span class="comment"># this script attempts to exclude uploading itself explicitly so the script name is important</span></span><br><span class="line"><span class="comment"># Get command line params</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">":r:u:p:"</span> opt; <span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">r) REPO_URL=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">;;</span><br><span class="line">u) USERNAME=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">;;</span><br><span class="line">p) PASSWORD=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line">find . -<span class="built_in">type</span> f -not -path <span class="string">'./mavenimport\.sh*'</span> -not -path <span class="string">'*/\.*'</span> -not -path <span class="string">'*/\^archetype\-catalog\.xml*'</span> -not -path <span class="string">'*/\^maven\-metadata\-local*\.xml'</span> -not -path <span class="string">'*/\^maven\-metadata\-deployment*\.xml'</span> | sed <span class="string">"s|^\./||"</span> | xargs -I <span class="string">'&#123;&#125;'</span> curl -u <span class="string">"<span class="variable">$USERNAME</span>:<span class="variable">$PASSWORD</span>"</span> -X PUT -v -T &#123;&#125; <span class="variable">$&#123;REPO_URL&#125;</span>/&#123;&#125; ;</span><br></pre></td></tr></table></figure><p>赋权限<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">chmod</span> +x maven<span class="keyword">import</span>.sh</span><br></pre></td></tr></table></figure></p><p>执行上传命令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mavenimport -u admin -<span class="selector-tag">p</span> admin123 -r http:<span class="comment">//192.168.1.82:8081/repository/thirdparty</span></span><br></pre></td></tr></table></figure></p><p>可能的操作，修改端口<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/opt/</span>nexus<span class="regexp">/sonatype-work/</span>nexus3<span class="regexp">/etc/</span>nexus.properties</span><br></pre></td></tr></table></figure></p><blockquote><h2 id="4-nexus设置开机自启"><a href="#4-nexus设置开机自启" class="headerlink" title="4    nexus设置开机自启"></a>4    nexus设置开机自启</h2></blockquote><p>创建软连接<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="regexp">/opt/</span>nexus<span class="regexp">/nexus-3.16.1-02/</span>bin<span class="regexp">/nexus /</span>etc<span class="regexp">/init.d/</span>nexus</span><br></pre></td></tr></table></figure></p><p>添加服务到开机自启<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --<span class="keyword">add</span><span class="bash"> nexus</span></span><br><span class="line"><span class="bash">chkconfig --levels 345 nexus on</span></span><br></pre></td></tr></table></figure></p><p>启动、停止、重新启动<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nexus start|<span class="type">stop</span>|<span class="type">restart</span></span><br></pre></td></tr></table></figure></p><blockquote><h2 id="5-遇到问题"><a href="#5-遇到问题" class="headerlink" title="5    遇到问题"></a>5    遇到问题</h2></blockquote><p>Q1    本地Maven更新包失败，异常Failed to read artifact descriptor ….<br>resolution will not be reattempted until the update interval of MyRepo has elapsed or updates are forced</p><p>1）删除下载失败的包，如，后缀为lastUpdated<br>2）IDE为myexlipse，右击项目 -&gt; Update Maven Dependencies -&gt; 勾选 Force Update of Snapshorts/Releases，强制更新依赖</p><blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2></blockquote><p><em><a href="https://blog.csdn.net/u014468095/article/details/87261817" target="_blank" rel="noopener">Nexus3.x批量导入本地库</a></em><br><em><a href="https://devopscube.com/how-to-install-latest-sonatype-nexus-3-on-linux/" target="_blank" rel="noopener">How To Install Latest Sonatype Nexus 3 On Linux</a></em></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> java环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nexus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Analysis basics p2:Graphing/visualization</title>
      <link href="/published/2019/04/21/Data-Analysis-basics-p2-Graphing-visualization/"/>
      <url>/published/2019/04/21/Data-Analysis-basics-p2-Graphing-visualization/</url>
      
        <content type="html"><![CDATA[<p>本文是python3+pandas数据分析p2:图形及可视化，主要包括：</p><ul><li>对数据进行可视化操作。</li></ul><a id="more"></a><blockquote><h5 id="0-导入依赖包"><a href="#0-导入依赖包" class="headerlink" title="0 导入依赖包"></a>0 导入依赖包</h5></blockquote><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><blockquote><h5 id="1-加载数据集"><a href="#1-加载数据集" class="headerlink" title="1 加载数据集"></a>1 加载数据集</h5></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">df</span> = pd.read_csv(<span class="string">"datasets/avocado.csv"</span>)</span><br></pre></td></tr></table></figure><blockquote><h5 id="2-图形及可视化操作"><a href="#2-图形及可视化操作" class="headerlink" title="2 图形及可视化操作"></a>2 图形及可视化操作</h5></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 字符串时间进行格式转化</span><br><span class="line">df[<span class="string">'Date'</span>] = pd.to_datetime(df[<span class="string">'Date'</span>])</span><br><span class="line">albany_df = df[df[<span class="string">'region'</span>]==<span class="string">"Albany"</span>]</span><br><span class="line">albany_df.set_index(<span class="string">"Date"</span>, inplace=<span class="symbol">True</span>)</span><br><span class="line"># 绘制<span class="symbol">Albany</span>随时间变化的曲线</span><br><span class="line">albany_df[<span class="string">"AveragePrice"</span>].plot()</span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用滚动平均值进行平滑数据</span></span><br><span class="line">albany_df[<span class="string">"AveragePrice"</span>]<span class="string">.rolling</span><span class="params">(25)</span><span class="string">.mean</span><span class="params">()</span><span class="string">.plot</span><span class="params">()</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 索引排序,此处会有告警，A value <span class="keyword">is</span> trying <span class="keyword">to</span> be <span class="keyword">set</span> <span class="keyword">on</span> a <span class="keyword">copy</span> <span class="keyword">of</span> a slice <span class="keyword">from</span> a DataFrame</span><br><span class="line">albany_df.sort_index(inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">albany_df</span><span class="selector-attr">["AveragePrice"]</span><span class="selector-class">.rolling</span>(25)<span class="selector-class">.mean</span>()<span class="selector-class">.plot</span>()</span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将得到的数据添加到新的列，此处会有告警</span></span><br><span class="line">albany_df[<span class="string">"price25ma"</span>] = albany_df[<span class="string">"AveragePrice"</span>]<span class="string">.rolling</span><span class="params">(25)</span><span class="string">.mean</span><span class="params">()</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">albany_df</span><span class="selector-class">.head</span>()</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">albany_df</span><span class="selector-class">.tail</span>()</span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 忽略告警操作</span><br><span class="line">albany_df = df.copy()[df[<span class="string">'region'</span>]==<span class="string">"Albany"</span>]</span><br><span class="line">albany_df.set_index(<span class="string">'Date'</span>, inplace=<span class="symbol">True</span>)</span><br><span class="line">albany_df[<span class="string">"price25ma"</span>] = albany_df[<span class="string">"AveragePrice"</span>].rolling(<span class="number">25</span>).mean()</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 获取指定列数据</span></span><br><span class="line">df[<span class="string">'region'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 转化为数组</span></span><br><span class="line">df[<span class="string">'region'</span>].values</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 转化为列表</span></span><br><span class="line">df[<span class="string">'region'</span>].values.tolist()</span><br><span class="line"><span class="meta"># 打印</span></span><br><span class="line">print(<span class="keyword">set</span>(df[<span class="string">'region'</span>].values.tolist()))</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 显示唯一值</span></span><br><span class="line">df[<span class="string">'region'</span>].unique()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">graph_df = pd.DataFrame()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> region <span class="keyword">in</span> df[<span class="string">'region'</span>].unique()[:<span class="number">16</span>]:</span><br><span class="line">    print(region)</span><br><span class="line">    region_df = df.copy()[df[<span class="string">'region'</span>]==region]</span><br><span class="line">    region_df.set_index(<span class="string">'Date'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    region_df.sort_index(inplace=<span class="keyword">True</span>)</span><br><span class="line">    region_df[<span class="string">f"<span class="subst">&#123;region&#125;</span>_price25ma"</span>] = region_df[<span class="string">"AveragePrice"</span>].rolling(<span class="number">25</span>).mean()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> graph_df.empty:</span><br><span class="line">        graph_df = region_df[[<span class="string">f"<span class="subst">&#123;region&#125;</span>_price25ma"</span>]]  <span class="comment"># note the double square brackets! 双中括号</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        graph_df = graph_df.join(region_df[<span class="string">f"<span class="subst">&#123;region&#125;</span>_price25ma"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示结果为重复数据</span></span><br><span class="line">graph_df.tail()</span><br></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">"datasets/avocado.csv"</span>)</span><br><span class="line"># 选取价格的一种方式 分为：Organic（有机的） 和 Conventional（常规的）</span><br><span class="line">df = df.copy()[df[<span class="string">'type'</span>]==<span class="string">'organic'</span>]</span><br><span class="line"></span><br><span class="line">df[<span class="string">"Date"</span>] = pd.to_datetime(df[<span class="string">"Date"</span>])</span><br><span class="line"></span><br><span class="line">df.sort_values(by=<span class="string">"Date"</span>, ascending=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">graph_df = pd.DataFrame()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> region <span class="keyword">in</span> df[<span class="string">'region'</span>].unique():</span><br><span class="line">    region_df = df.copy()[df[<span class="string">'region'</span>]==region]</span><br><span class="line">    region_df.set_index(<span class="string">'Date'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    region_df.sort_index(inplace=<span class="keyword">True</span>)</span><br><span class="line">    region_df[<span class="string">f"<span class="subst">&#123;region&#125;</span>_price25ma"</span>] = region_df[<span class="string">"AveragePrice"</span>].rolling(<span class="number">25</span>).mean()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> graph_df.empty:</span><br><span class="line">        graph_df = region_df[[<span class="string">f"<span class="subst">&#123;region&#125;</span>_price25ma"</span>]]  <span class="comment"># note the double square brackets! (so df rather than series)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        graph_df = graph_df.join(region_df[<span class="string">f"<span class="subst">&#123;region&#125;</span>_price25ma"</span>])</span><br><span class="line"><span class="comment"># 再次显示，正常</span></span><br><span class="line">graph_df.tail()</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph_df.dropna().plot(figsize=(8,5), <span class="attribute">legend</span>=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><em>原文:<a href="https://pythonprogramming.net/graph-visualization-python3-pandas-data-analysis/" target="_blank" rel="noopener">Graphing/visualization</a></em></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> DA basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DA basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning basics p7: Recurrent neural networks</title>
      <link href="/published/2019/04/17/Deep-Learning-basics-p7-Recurrent-neural-networks/"/>
      <url>/published/2019/04/17/Deep-Learning-basics-p7-Recurrent-neural-networks/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：</p><ul><li>加载mnist数据集</li><li>构建模型</li><li>自定义优化器</li><li>配置学习过程</li><li>训练模型</li></ul><a id="more"></a><blockquote><h5 id="0-导入依赖包"><a href="#0-导入依赖包" class="headerlink" title="0 导入依赖包"></a>0 导入依赖包</h5></blockquote><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="title">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="title">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Dropout, LSTM</span><br></pre></td></tr></table></figure><blockquote><h5 id="1-加载数据"><a href="#1-加载数据" class="headerlink" title="1 加载数据"></a>1 加载数据</h5></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(x_train, y_train),(x_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化处理</span></span><br><span class="line">x_train = x_train/255.0</span><br><span class="line">x_test = x_test/255.0</span><br><span class="line"></span><br><span class="line">print(x_train.shape)</span><br><span class="line">print(x_train[0].shape)</span><br></pre></td></tr></table></figure><blockquote><h5 id="2-构建模型"><a href="#2-构建模型" class="headerlink" title="2 构建模型"></a>2 构建模型</h5></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line"><span class="comment"># 栈式 LSTM 的序列分类</span></span><br><span class="line"><span class="comment"># use LSTM cell 返回维度为128的向量序列</span></span><br><span class="line">model.<span class="builtin-name">add</span>(LSTM(128, input_shape=(x_train.shape[1:]), <span class="attribute">activation</span>=<span class="string">'relu'</span>, <span class="attribute">return_sequences</span>=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># dropout:设置输入丢弃的比例</span></span><br><span class="line">model.<span class="builtin-name">add</span>(Dropout(0.2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回维度为128的单个向量</span></span><br><span class="line">model.<span class="builtin-name">add</span>(LSTM(128, <span class="attribute">activation</span>=<span class="string">'relu'</span>))</span><br><span class="line">model.<span class="builtin-name">add</span>(Dropout(0.1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出数据的尺寸为(*, 32)</span></span><br><span class="line">model.<span class="builtin-name">add</span>(Dense(32, <span class="attribute">activation</span>=<span class="string">'relu'</span>))</span><br><span class="line">model.<span class="builtin-name">add</span>(Dropout(0.2))</span><br><span class="line"></span><br><span class="line">model.<span class="builtin-name">add</span>(Dense(10, <span class="attribute">activation</span>=<span class="string">'softmax'</span>))</span><br></pre></td></tr></table></figure><blockquote><h5 id="3-自定义优化器"><a href="#3-自定义优化器" class="headerlink" title="3 自定义优化器"></a>3 自定义优化器</h5></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lr:学习率，decay：每次更新后，学习率衰减值</span></span><br><span class="line">opt = tf.keras.optimizers.Adam(<span class="attribute">lr</span>=0.001, <span class="attribute">decay</span>=1e-6)</span><br></pre></td></tr></table></figure><blockquote><h5 id="4-配置学习过程"><a href="#4-配置学习过程" class="headerlink" title="4 配置学习过程"></a>4 配置学习过程</h5></blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">model</span>.compile(</span><br><span class="line">    loss = <span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">    optimizer = opt,</span><br><span class="line">    metrics = [<span class="string">'accuracy'</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><h5 id="5-训练模型"><a href="#5-训练模型" class="headerlink" title="5 训练模型"></a>5 训练模型</h5></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中，循环轮次3；作为验证集比例为0.3</span></span><br><span class="line">model.fit<span class="params">(x_train,</span></span><br><span class="line"><span class="params">         y_train,</span></span><br><span class="line"><span class="params">          <span class="attr">epochs</span> = 3,</span></span><br><span class="line"><span class="params">          <span class="attr">validation_data</span> = (x_test, y_test)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><em>原文:<a href="https://pythonprogramming.net/recurrent-neural-network-deep-learning-python-tensorflow-keras/" target="_blank" rel="noopener">Recurrent Neural Networks</a></em></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> DL basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Analysis basics p1:Introduction</title>
      <link href="/published/2019/04/14/Data-Analysis-basics-p1-Introduction/"/>
      <url>/published/2019/04/14/Data-Analysis-basics-p1-Introduction/</url>
      
        <content type="html"><![CDATA[<p>本文是python3+pandas数据分析介绍p1，主要包括：</p><ul><li>加载avocado.csv数据集。</li><li>根据条件显示数据的相关信息，顺序、倒序、条件、索引、重置索引及绘图。</li></ul><a id="more"></a><blockquote><h5 id="0-导入依赖包"><a href="#0-导入依赖包" class="headerlink" title="0 导入依赖包"></a>0 导入依赖包</h5></blockquote><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"># <span class="keyword">import</span> matplotlib</span><br></pre></td></tr></table></figure><blockquote><h5 id="1-加载数据"><a href="#1-加载数据" class="headerlink" title="1 加载数据"></a>1 加载数据</h5></blockquote><p>下载数据集<br>官方：<a href="https://www.kaggle.com/neuromusic/avocado-prices" target="_blank" rel="noopener">Avocado Prices</a><br>本地：<a href="/downloads/datasets/avocado-prices.zip">Avocado Prices</a></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">df</span> = pd.read_csv(<span class="string">"datasets/avocado.csv"</span>)</span><br></pre></td></tr></table></figure><blockquote><h5 id="2-对数据进行简单操作"><a href="#2-对数据进行简单操作" class="headerlink" title="2 对数据进行简单操作"></a>2 对数据进行简单操作</h5></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 顺序</span></span><br><span class="line">df.head()</span><br><span class="line"><span class="meta"># 显示前3条</span></span><br><span class="line">df.head(<span class="number">3</span>)</span><br><span class="line"><span class="meta"># 逆序</span></span><br><span class="line">df.tail(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 显示指定的列</span></span><br><span class="line">df[<span class="string">'AveragePrice'</span>].head()</span><br><span class="line"></span><br><span class="line">df.AveragePrice.head()</span><br><span class="line"></span><br><span class="line"><span class="meta"># 显示指定区域</span></span><br><span class="line">albany_df = df[df[<span class="string">'region'</span>] == <span class="string">"Albany"</span>]</span><br><span class="line">albany_df.head()</span><br><span class="line"></span><br><span class="line"><span class="meta"># 显示索引</span></span><br><span class="line">albany_df.index</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重设索引</span></span><br><span class="line">albany_df.set_index(<span class="string">"Date"</span>)</span><br><span class="line">albany_df.head()</span><br><span class="line"></span><br><span class="line"><span class="meta"># albany_df.set_index("Date", inplace=True)</span></span><br><span class="line"><span class="meta"># 绘图</span></span><br><span class="line">albany_df[<span class="string">'AveragePrice'</span>].plot()</span><br></pre></td></tr></table></figure><p><em>原文:<a href="https://pythonprogramming.net/introduction-python3-pandas-data-analysis/" target="_blank" rel="noopener">Introduction</a></em></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> DA basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DA basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning basics p6: How to use your trained model</title>
      <link href="/published/2019/04/11/Deep-Learning-basics-p6-How-to-use-your-trained-model/"/>
      <url>/published/2019/04/11/Deep-Learning-basics-p6-How-to-use-your-trained-model/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：</p><ul><li>加载自定义数据，并设置模型参数</li><li>进行模型训练</li><li>保存模型</li><li>调用模型进行实际预测</li></ul><a id="more"></a><blockquote><h5 id="0-导入依赖包"><a href="#0-导入依赖包" class="headerlink" title="0 导入依赖包"></a>0 导入依赖包</h5></blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line">from tensorflow.keras.layers <span class="keyword">import</span> Dense, Dropout, Activation, Flatten</span><br><span class="line">from tensorflow.keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D</span><br><span class="line">from tensorflow.keras.callbacks <span class="keyword">import</span> TensorBoard</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">time</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="1-加载数据"><a href="#1-加载数据" class="headerlink" title="1 加载数据"></a>1 加载数据</h5></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pickle_in</span> = open(<span class="string">"X.pickle"</span>,<span class="string">"rb"</span>)</span><br><span class="line"><span class="attr">X</span> = pickle.load(pickle_in)</span><br><span class="line"></span><br><span class="line"><span class="attr">pickle_in</span> = open(<span class="string">"y.pickle"</span>,<span class="string">"rb"</span>)</span><br><span class="line"><span class="attr">y</span> = pickle.load(pickle_in)</span><br><span class="line"></span><br><span class="line"><span class="attr">X</span> = X/<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dense_layers</span> = [<span class="number">0</span>]</span><br><span class="line"><span class="attr">layer_sizes</span> = [<span class="number">64</span>]</span><br><span class="line"><span class="attr">conv_layers</span> = [<span class="number">3</span>]</span><br></pre></td></tr></table></figure><blockquote><h5 id="2-进行训练"><a href="#2-进行训练" class="headerlink" title="2 进行训练"></a>2 进行训练</h5></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> dense_layer <span class="keyword">in</span> dense_layers:</span><br><span class="line">    <span class="keyword">for</span> layer_size <span class="keyword">in</span> layer_sizes:</span><br><span class="line">        <span class="keyword">for</span> conv_layer <span class="keyword">in</span> conv_layers:</span><br><span class="line">            NAME = <span class="string">"&#123;&#125;-conv-&#123;&#125;-nodes-&#123;&#125;-dense-&#123;&#125;"</span>.<span class="built_in">format</span>(conv_layer, layer_size, dense_layer, int(<span class="built_in">time</span>.<span class="built_in">time</span>()))</span><br><span class="line">            print(NAME)</span><br><span class="line"></span><br><span class="line">            model = Sequential()</span><br><span class="line"></span><br><span class="line">            model.<span class="built_in">add</span>(Conv2D(layer_size, (<span class="number">3</span>, <span class="number">3</span>), input_shape=X.shape[<span class="number">1</span>:]))</span><br><span class="line">            model.<span class="built_in">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line">            model.<span class="built_in">add</span>(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(conv_layer<span class="number">-1</span>):</span><br><span class="line">                model.<span class="built_in">add</span>(Conv2D(layer_size, (<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">                model.<span class="built_in">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line">                model.<span class="built_in">add</span>(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">            model.<span class="built_in">add</span>(Flatten())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(dense_layer):</span><br><span class="line">                model.<span class="built_in">add</span>(Dense(layer_size))</span><br><span class="line">                model.<span class="built_in">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line"></span><br><span class="line">            model.<span class="built_in">add</span>(Dense(<span class="number">1</span>))</span><br><span class="line">            model.<span class="built_in">add</span>(Activation(<span class="string">'sigmoid'</span>))</span><br><span class="line"></span><br><span class="line">            tensorboard = TensorBoard(log_dir=<span class="string">"logs/&#123;&#125;"</span>.<span class="built_in">format</span>(NAME))</span><br><span class="line"></span><br><span class="line">            model.compile(loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">                          optimizer=<span class="string">'adam'</span>,</span><br><span class="line">                          metrics=[<span class="string">'accuracy'</span>],</span><br><span class="line">                          )</span><br><span class="line"></span><br><span class="line">            model.fit(X, y,</span><br><span class="line">                      batch_size=<span class="number">32</span>,</span><br><span class="line">                      epochs=<span class="number">10</span>,</span><br><span class="line">                      validation_split=<span class="number">0.3</span>,</span><br><span class="line">                      callbacks=[tensorboard])</span><br></pre></td></tr></table></figure><blockquote><h5 id="3-保存模型"><a href="#3-保存模型" class="headerlink" title="3 保存模型"></a>3 保存模型</h5></blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">model</span>.save(<span class="string">'64x3-CNN.model'</span>)</span><br></pre></td></tr></table></figure><blockquote><h5 id="4-调用模型进行实际预测"><a href="#4-调用模型进行实际预测" class="headerlink" title="4 调用模型进行实际预测"></a>4 调用模型进行实际预测</h5></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">CATEGORIES = ["Dog", "Cat"]</span><br><span class="line"></span><br><span class="line"><span class="section"># 对图像进行训练，灰度化、调整大小及重塑</span></span><br><span class="line">def prepare(filepath):</span><br><span class="line"><span class="code">    IMG_SIZE = 70  # 50 in txt-based</span></span><br><span class="line"><span class="code">    img_array = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)</span></span><br><span class="line"><span class="code">    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))</span></span><br><span class="line"><span class="code">    return new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 1)</span></span><br><span class="line"></span><br><span class="line">model = tf.keras.models.load_model("64x3-CNN.model") #加载模型</span><br><span class="line"></span><br><span class="line">prediction = model.predict([prepare('dog.jpg')]) #进行预测，需要是列表</span><br><span class="line">print(prediction)</span><br><span class="line"></span><br><span class="line">prediction[<span class="string">0</span>][<span class="symbol">0</span>] #获取实际预测</span><br><span class="line">print(CATEGORIES[<span class="string">int(prediction[0</span>][<span class="symbol">0</span>])])    #获取类别</span><br></pre></td></tr></table></figure><p><em>原文:<a href="https://pythonprogramming.net/using-trained-model-deep-learning-python-tensorflow-keras/" target="_blank" rel="noopener">How to use your trained model</a></em></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> DL basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning basics p5: Optimizing Models with TensorBoard</title>
      <link href="/published/2019/04/02/Deep-Learning-basics-p5-Optimizing-Models-with-TensorBoard/"/>
      <url>/published/2019/04/02/Deep-Learning-basics-p5-Optimizing-Models-with-TensorBoard/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容：</p><ul><li>加载自定义数据，并设置模型参数</li><li>优化参数，进行模型训练</li><li>查看训练状态</li></ul><a id="more"></a><blockquote><h5 id="0-导入依赖包"><a href="#0-导入依赖包" class="headerlink" title="0 导入依赖包"></a>0 导入依赖包</h5></blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line">from tensorflow.keras.layers <span class="keyword">import</span> Dense, Dropout, Activation, Flatten</span><br><span class="line">from tensorflow.keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D</span><br><span class="line"># more info on callbakcs: https:<span class="comment">//keras.io/callbacks/ model saver is cool too.</span></span><br><span class="line">from tensorflow.keras.callbacks <span class="keyword">import</span> TensorBoard</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">time</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="1-加载数据"><a href="#1-加载数据" class="headerlink" title="1 加载数据"></a>1 加载数据</h5></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pickle_in</span> = open(<span class="string">"X.pickle"</span>, <span class="string">"rb"</span>)</span><br><span class="line"><span class="attr">X</span> = pickle.load(pickle_in)</span><br><span class="line"></span><br><span class="line"><span class="attr">pickle_in</span> = open(<span class="string">"y.pickle"</span>, <span class="string">"rb"</span>)</span><br><span class="line"><span class="attr">y</span> = pickle.load(pickle_in)</span><br><span class="line"></span><br><span class="line"><span class="attr">X</span> = X / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以对参数进行调整</span></span><br><span class="line"><span class="attr">dense_layers</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="attr">layer_sizes</span> = [<span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>]</span><br><span class="line"><span class="attr">conv_layers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><blockquote><h5 id="2-进行训练"><a href="#2-进行训练" class="headerlink" title="2 进行训练"></a>2 进行训练</h5></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据给定的模型参数，进行训练</span></span><br><span class="line"><span class="keyword">for</span> dense_layer <span class="keyword">in</span> dense_layers:</span><br><span class="line">    <span class="keyword">for</span> layer_size <span class="keyword">in</span> layer_sizes:</span><br><span class="line">        <span class="keyword">for</span> conv_layer <span class="keyword">in</span> conv_layers:</span><br><span class="line">            NAME = <span class="string">"&#123;&#125;-conv-&#123;&#125;-nodes-&#123;&#125;-dense-&#123;&#125;"</span>.<span class="built_in">format</span>(conv_layer, layer_size, dense_layer, int(<span class="built_in">time</span>.<span class="built_in">time</span>()))</span><br><span class="line">            print(NAME)</span><br><span class="line"></span><br><span class="line">            model = Sequential()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 可以调整输出的维度 layer_size</span></span><br><span class="line">            model.<span class="built_in">add</span>(Conv2D(layer_size, (<span class="number">3</span>, <span class="number">3</span>), input_shape=X.shape[<span class="number">1</span>:]))</span><br><span class="line">            model.<span class="built_in">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line">            model.<span class="built_in">add</span>(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(conv_layer - <span class="number">1</span>):</span><br><span class="line">                model.<span class="built_in">add</span>(Conv2D(layer_size, (<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">                model.<span class="built_in">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line">                model.<span class="built_in">add</span>(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">            model.<span class="built_in">add</span>(Flatten())</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(dense_layer):</span><br><span class="line">                model.<span class="built_in">add</span>(Dense(layer_size))</span><br><span class="line">                model.<span class="built_in">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line"></span><br><span class="line">            model.<span class="built_in">add</span>(Dense(<span class="number">1</span>))</span><br><span class="line">            model.<span class="built_in">add</span>(Activation(<span class="string">'sigmoid'</span>))</span><br><span class="line"></span><br><span class="line">            tensorboard = TensorBoard(log_dir=<span class="string">"logs/&#123;&#125;"</span>.<span class="built_in">format</span>(NAME))</span><br><span class="line"></span><br><span class="line">            model.compile(loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">                          optimizer=<span class="string">'adam'</span>,</span><br><span class="line">                          metrics=[<span class="string">'accuracy'</span>],</span><br><span class="line">                          )</span><br><span class="line"></span><br><span class="line">            model.fit(X, y,</span><br><span class="line">                      batch_size=<span class="number">32</span>,</span><br><span class="line">                      epochs=<span class="number">3</span>,</span><br><span class="line">                      validation_split=<span class="number">0.3</span>,</span><br><span class="line">                      callbacks=[tensorboard])</span><br></pre></td></tr></table></figure><blockquote><h5 id="3-查看训练状态"><a href="#3-查看训练状态" class="headerlink" title="3 查看训练状态"></a>3 查看训练状态</h5></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在终端输入命令，加载日志文件进行查看，主要对比各个参数的性能</span><br><span class="line">tensorboard <span class="attribute">--logdir</span>=logs/</span><br></pre></td></tr></table></figure><p><em>原文：<a href="https://pythonprogramming.net/tensorboard-optimizing-models-deep-learning-python-tensorflow-keras/" target="_blank" rel="noopener">Optimizing Models with TensorBoard </a></em></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> DL basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning basics p4: Analyzing Models with TensorBoard</title>
      <link href="/published/2019/03/30/Deep-Learning-basics-p4-Analyzing-Models-with-TensorBoard/"/>
      <url>/published/2019/03/30/Deep-Learning-basics-p4-Analyzing-Models-with-TensorBoard/</url>
      
        <content type="html"><![CDATA[<p>本文主要包括：</p><ul><li>加载自定义数据</li><li>构建顺序模型，并对模型进行堆叠</li><li>配置学习过程</li><li>训练数据</li><li>通过调用回调函数，查看训练过程的状态</li></ul><a id="more"></a><blockquote><h5 id="0-导入依赖包"><a href="#0-导入依赖包" class="headerlink" title="0 导入依赖包"></a>0 导入依赖包</h5></blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># <span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"># from tensorflow.keras.datasets <span class="keyword">import</span> cifar10</span><br><span class="line"># from tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line">from tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line">from tensorflow.keras.layers <span class="keyword">import</span> Dense, Dropout, Activation, Flatten</span><br><span class="line">from tensorflow.keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D</span><br><span class="line">from tensorflow.keras.callbacks <span class="keyword">import</span> TensorBoard</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">time</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h5 id="1-加载数据。"><a href="#1-加载数据。" class="headerlink" title="1 加载数据。"></a>1 加载数据。</h5></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NAME</span> = <span class="string">"Cats-vs-dogs-64x2-&#123;&#125;"</span>.format(int(time.time()))</span><br><span class="line"><span class="attr">pickle_in</span> = open(<span class="string">"X.pickle"</span>,<span class="string">"rb"</span>)</span><br><span class="line"><span class="attr">X</span> = pickle.load(pickle_in)</span><br><span class="line"></span><br><span class="line"><span class="attr">pickle_in</span> = open(<span class="string">"Y.pickle"</span>,<span class="string">"rb"</span>)</span><br><span class="line"><span class="attr">Y</span> = pickle.load(pickle_in)</span><br><span class="line"></span><br><span class="line"><span class="attr">X</span> = X/<span class="number">255.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h5 id="2-构建模型。"><a href="#2-构建模型。" class="headerlink" title="2 构建模型。"></a>2 构建模型。</h5></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆叠模型</span></span><br><span class="line"><span class="comment"># 2D卷积层 64表示输出空间的维度 (3, 3)表示2D卷积窗口的宽度和高度，单个数时，表示维度值相同</span></span><br><span class="line">model.<span class="built_in">add</span>(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), input_shape=X.shape[<span class="number">1</span>:]))</span><br><span class="line">model.<span class="built_in">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line">model.<span class="built_in">add</span>(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">add</span>(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line">model.<span class="built_in">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line">model.<span class="built_in">add</span>(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整为1D的特征向量</span></span><br><span class="line">model.<span class="built_in">add</span>(Flatten())</span><br><span class="line">model.<span class="built_in">add</span>(Dense(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">add</span>(Dense(<span class="number">1</span>))</span><br><span class="line">model.<span class="built_in">add</span>(Activation(<span class="string">'sigmoid'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化配置，这里设置了日志</span></span><br><span class="line">tensorboard = TensorBoard(log_dir=<span class="string">"logs/&#123;&#125;"</span>.<span class="built_in">format</span>(NAME))</span><br></pre></td></tr></table></figure><blockquote><h5 id="3-配置学习过程。"><a href="#3-配置学习过程。" class="headerlink" title="3 配置学习过程。"></a>3 配置学习过程。</h5></blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">model</span>.compile(loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              optimizer=<span class="string">'adam'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>],</span><br><span class="line">              )</span><br><span class="line">              </span><br></pre></td></tr></table></figure><blockquote><h5 id="4-训练模型。"><a href="#4-训练模型。" class="headerlink" title="4 训练模型。"></a>4 训练模型。</h5></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用回调函数，可以查看训练模型的状态及统计信息</span></span><br><span class="line">model.fit(X, Y,</span><br><span class="line">          <span class="attribute">batch_size</span>=32,</span><br><span class="line">          <span class="attribute">epochs</span>=2,</span><br><span class="line">          <span class="attribute">validation_split</span>=0.3,</span><br><span class="line">          callbacks=[tensorboard])</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h5 id="5-查看训练状态。"><a href="#5-查看训练状态。" class="headerlink" title="5 查看训练状态。"></a>5 查看训练状态。</h5></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端输入命令，加载日志文件进行查看</span></span><br><span class="line">tensorboard <span class="attribute">--logdir</span>=logs/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>原文：<a href="https://pythonprogramming.net/tensorboard-analysis-deep-learning-python-tensorflow-keras/" target="_blank" rel="noopener">Analyzing Models with TensorBoard</a></em></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> DL basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning basics p3: Convolutional Neural Networks</title>
      <link href="/published/2019/03/30/Deep-Learning-basics-p3-Convolutional-Neural-Networks/"/>
      <url>/published/2019/03/30/Deep-Learning-basics-p3-Convolutional-Neural-Networks/</url>
      
        <content type="html"><![CDATA[<p>本文主要包括：</p><ul><li>加载自定义数据</li><li>构建顺序模型，并对模型进行堆叠</li><li>配置学习过程</li><li>训练数据</li></ul><a id="more"></a><blockquote><h5 id="0-导入依赖包"><a href="#0-导入依赖包" class="headerlink" title="0 导入依赖包"></a>0 导入依赖包</h5></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from tensorflow<span class="selector-class">.keras</span><span class="selector-class">.models</span> import Sequential</span><br><span class="line">from tensorflow<span class="selector-class">.keras</span><span class="selector-class">.layers</span> import Dense, Dropout, Activation, Flatten</span><br><span class="line">from tensorflow<span class="selector-class">.keras</span><span class="selector-class">.layers</span> import Conv2D, MaxPooling2D</span><br><span class="line"></span><br><span class="line">import pickle</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h5 id="1-加载数据。"><a href="#1-加载数据。" class="headerlink" title="1 加载数据。"></a>1 加载数据。</h5></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># X为输入数据</span></span><br><span class="line"><span class="attr">pickle_in</span> = open(<span class="string">"X.pickle"</span>, <span class="string">"rb"</span>)</span><br><span class="line"><span class="attr">X</span> = pickle.load(pickle_in)</span><br><span class="line"><span class="comment"># Y为标签</span></span><br><span class="line"><span class="attr">pickle_in</span> = open(<span class="string">"Y.pickle"</span>, <span class="string">"rb"</span>)</span><br><span class="line"><span class="attr">Y</span> = pickle.load(pickle_in)</span><br><span class="line"><span class="attr">X</span> = X/<span class="number">255.0</span></span><br><span class="line"><span class="comment"># print(Y)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h5 id="2-构建模型。"><a href="#2-构建模型。" class="headerlink" title="2 构建模型。"></a>2 构建模型。</h5></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="meta"># 堆叠模型。</span></span><br><span class="line"><span class="meta"># 2D卷积层 256表示输出空间的维度 ；(3, 3)表示2D卷积窗口的宽度和高度，单个数时，表示维度值相同；</span></span><br><span class="line">model.<span class="keyword">add</span>(Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), input_shape = X.shape[<span class="number">1</span>:]))</span><br><span class="line">model.<span class="keyword">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line"><span class="meta"># MaxPooling2D,对空间数据的最大池化</span></span><br><span class="line">model.<span class="keyword">add</span>(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">model.<span class="keyword">add</span>(Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="meta"># 设置激活函数</span></span><br><span class="line">model.<span class="keyword">add</span>(Activation(<span class="string">'relu'</span>))</span><br><span class="line">model.<span class="keyword">add</span>(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="meta"># 调整为1D的特征向量</span></span><br><span class="line">model.<span class="keyword">add</span>(Flatten())</span><br><span class="line"><span class="meta"># 全连接层，设置输出空间维度，即输出数据的尺寸为（*， 64）</span></span><br><span class="line">model.<span class="keyword">add</span>(Dense(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line">model.<span class="keyword">add</span>(Dense(<span class="number">1</span>))</span><br><span class="line"><span class="meta"># 设置激活函数sigmoid</span></span><br><span class="line">model.<span class="keyword">add</span>(Activation(<span class="string">'sigmoid'</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h5 id="3-配置学习过程。"><a href="#3-配置学习过程。" class="headerlink" title="3 配置学习过程。"></a>3 配置学习过程。</h5></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta"># 主要 配置优化器optimizer，损失函数loss及评估标准metrics</span></span><br><span class="line">model.compile(loss = <span class="string">'binary_crossentropy'</span>,</span><br><span class="line">             optimizer=<span class="string">'adam'</span>,</span><br><span class="line">             metrics = [<span class="string">'accuracy'</span>])</span><br><span class="line">             </span><br></pre></td></tr></table></figure><blockquote><h5 id="4-训练模型。"><a href="#4-训练模型。" class="headerlink" title="4 训练模型。"></a>4 训练模型。</h5></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 对样本X, Y进行迭代，批处理样本数<span class="number">32</span>；迭代次数<span class="number">3</span>；作为验证集比例为<span class="number">0.3</span></span><br><span class="line">model.fit(X, Y, batch_size = <span class="number">32</span>, epochs = <span class="number">1</span>, validation_split = <span class="number">0.3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>原文：<a href="https://pythonprogramming.net/convolutional-neural-network-deep-learning-python-tensorflow-keras/" target="_blank" rel="noopener">Convolutional Neural Networks</a></em></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> DL basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS6.5 配置Iptables</title>
      <link href="/published/2019/03/24/CentOS6-5-%E9%85%8D%E7%BD%AEIptables/"/>
      <url>/published/2019/03/24/CentOS6-5-%E9%85%8D%E7%BD%AEIptables/</url>
      
        <content type="html"><![CDATA[<p>要求：内网服务器需要进行访问限制，配置防火墙可以方便、简单地实现功能。如开放某个服务或其他特定端口，允许一段ip地址访问，禁止另一段ip地址访问。</p><a id="more"></a><h2 id="1-确定开启的服务及端口"><a href="#1-确定开启的服务及端口" class="headerlink" title="1. 确定开启的服务及端口"></a>1. 确定开启的服务及端口</h2><p>HTTP (TCP on port 80), HTTPS (TCP on port 443), SSH (TCP on port 22 by default), NTP (UDP on port 123), DNS (TCP and UDP on port 53), ping (ICMP),telnet(23),ftp (21,20,1024),mysql (3306),mongo (27017)</p><p>iptables配置文件路径： <code>/etc/sysconfig/iptables</code></p><h2 id="2-配置规则"><a href="#2-配置规则" class="headerlink" title="2. 配置规则"></a>2. 配置规则</h2><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看iptables配置信息</span></span><br><span class="line">iptables -L -n</span><br><span class="line"></span><br><span class="line"><span class="meta"># 清除配置规则    -F: 清除默认所有, -X:清除自定义, -Z:清空计数器值</span></span><br><span class="line">iptables -F<span class="comment">; iptables -X; iptables -Z</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 允许本地回环访问</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -i lo -j ACCEPT</span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -d <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span> -j REJECT</span><br><span class="line"></span><br><span class="line"><span class="meta"># 阻止通用攻击</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp ! --syn -m state --state NEW -j DROP</span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --tcp-flags ALL NONE -j DROP</span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --tcp-flags ALL ALL -j DROP</span><br><span class="line"></span><br><span class="line"><span class="meta"># 允许已建立的入站连接</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="meta"># 允许http和https</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">80</span> -j ACCEPT</span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">443</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 允许ssh</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">22</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 允许ntp</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p udp --dport <span class="number">123</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 允许dns</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p udp --dport <span class="number">53</span> -j ACCEPT</span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">53</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 允许ping包</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p icmp --icmp-type echo-request -j ACCEPT</span><br><span class="line"><span class="meta"># 允许telnet</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">23</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 允许ftp <span class="number">21</span>:ftp <span class="number">20</span>:active mode   <span class="number">1024</span>:Passive mode</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">20</span> -j ACCEPT</span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">21</span> -j ACCEPT</span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">1024</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 允许mysql</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">3306</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 允许mongo</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">27017</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 允许特定ip+port访问</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp -s <span class="number">192.168</span><span class="number">.1</span><span class="number">.78</span> --dport <span class="number">22</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 禁止特定ip+其他端口访问(注意：禁止其他端口需要在允许特定端口之后配置)</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp -s <span class="number">192.168</span><span class="number">.1</span><span class="number">.78</span> -j DROP</span><br><span class="line"><span class="meta"># 允许多个ip访问</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -i eth1 -m iprange --src-range <span class="number">192.168</span><span class="number">.1</span><span class="number">.81</span><span class="number">-192.168</span><span class="number">.1</span><span class="number">.90</span> -j ACCEPT</span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -i eth1 -s <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> -j ACCEPT</span><br><span class="line"><span class="meta"># 阻止多个ip访问</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -m iprange --src-range <span class="number">192.168</span><span class="number">.1</span><span class="number">.71</span><span class="number">-192.168</span><span class="number">.1</span><span class="number">.80</span> -j DROP</span><br><span class="line"><span class="meta">#封停一个IP，-I是插入到最前面</span></span><br><span class="line">iptables -I <span class="keyword">INPUT</span> -s <span class="number">192.168</span><span class="number">.1</span><span class="number">.78</span> -j DROP</span><br><span class="line"><span class="meta">#要解封一个IP</span></span><br><span class="line">iptables -D <span class="keyword">INPUT</span> -s <span class="number">192.168</span><span class="number">.1</span><span class="number">.78</span> -j DROP</span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置默认规则</span></span><br><span class="line"><span class="meta"># 丢掉其他入站包，允许所有出栈包，丢掉所有转发包</span></span><br><span class="line">iptables -P <span class="keyword">INPUT</span> DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure><h2 id="3-保存"><a href="#3-保存" class="headerlink" title="3. 保存"></a>3. 保存</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存配置</span></span><br><span class="line">service iptables save</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h2 id="4-其他相关命令"><a href="#4-其他相关命令" class="headerlink" title="4. 其他相关命令"></a>4. 其他相关命令</h2><h3 id="4-1-修改规则"><a href="#4-1-修改规则" class="headerlink" title="4.1 修改规则"></a>4.1 修改规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看需要删除的规则及序号</span></span><br><span class="line">iptables -L -n --line-number</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定端口规则对应的序列号</span></span><br><span class="line">iptables -D INPUT 5</span><br><span class="line"><span class="meta">#</span><span class="bash"> 确认是否删除</span></span><br><span class="line">iptables -L -n --line-number</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新配置</span></span><br></pre></td></tr></table></figure><h3 id="4-2-iptables相关命令"><a href="#4-2-iptables相关命令" class="headerlink" title="4.2 iptables相关命令"></a>4.2 iptables相关命令</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自启/关闭</span></span><br><span class="line">chkconfig iptables on|off</span><br><span class="line"><span class="comment"># 启动/关闭/重启 服务</span></span><br><span class="line">service iptables start|stop|restart</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">service iptables status</span><br></pre></td></tr></table></figure><h2 id="5-iptables帮助命令"><a href="#5-iptables帮助命令" class="headerlink" title="5. iptables帮助命令"></a>5. iptables帮助命令</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">iptables(选项)(参数)</span><br><span class="line"></span><br><span class="line">-<span class="ruby">t&lt;表&gt;：指定要操纵的表；</span></span><br><span class="line"><span class="ruby">-A：向规则链中添加或追加条目；</span></span><br><span class="line"><span class="ruby">-D：从规则链中删除条目；</span></span><br><span class="line"><span class="ruby">-i：向规则链中插入条目；</span></span><br><span class="line"><span class="ruby">-R：替换规则链中的条目；</span></span><br><span class="line"><span class="ruby">-L：显示规则链中已有的条目；</span></span><br><span class="line"><span class="ruby">-F：清楚规则链中已有的条目；</span></span><br><span class="line"><span class="ruby">-Z：清空规则链中的数据包计算器和字节计数器；</span></span><br><span class="line"><span class="ruby">-N：创建新的用户自定义规则链；</span></span><br><span class="line"><span class="ruby">-P：定义规则链中的默认目标；</span></span><br><span class="line"><span class="ruby">-h：显示帮助信息；</span></span><br><span class="line"><span class="ruby">-p：指定要匹配的数据包协议类型；</span></span><br><span class="line"><span class="ruby">-s：指定要匹配的数据包源ip地址；</span></span><br><span class="line"><span class="ruby">-j&lt;目标&gt;：指定要跳转的目标；</span></span><br><span class="line"><span class="ruby">-i&lt;网络接口&gt;：指定数据包进入本机的网络接口；</span></span><br><span class="line"><span class="ruby">-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">iptables命令选项输入顺序：</span></span><br><span class="line"><span class="ruby">iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">表名包括：</span></span><br><span class="line"><span class="ruby">raw：高级功能，如：网址过滤。</span></span><br><span class="line"><span class="ruby">mangle：数据包修改（QOS），用于实现服务质量。</span></span><br><span class="line"><span class="ruby">net：地址转换，用于网关路由器。</span></span><br><span class="line"><span class="ruby">filter：包过滤，用于防火墙规则，默认为filter。</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">规则链名包括：</span></span><br><span class="line"><span class="ruby">INPUT链：处理输入数据包。</span></span><br><span class="line"><span class="ruby">OUTPUT链：处理输出数据包。</span></span><br><span class="line"><span class="ruby">PORWARD链：处理转发数据包。</span></span><br><span class="line"><span class="ruby">PREROUTING链：用于目标地址转换（DNAT）。</span></span><br><span class="line"><span class="ruby">POSTOUTING链：用于源地址转换（SNAT）。</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">动作包括：</span></span><br><span class="line"><span class="ruby">accept：接收数据包。</span></span><br><span class="line"><span class="ruby">DROP：丢弃数据包。</span></span><br><span class="line"><span class="ruby">REDIRECT：重定向、映射、透明代理。</span></span><br><span class="line"><span class="ruby">SNAT：源地址转换。</span></span><br><span class="line"><span class="ruby">DNAT：目标地址转换。</span></span><br><span class="line"><span class="ruby">MASQUERADE：IP伪装（NAT），用于ADSL。</span></span><br><span class="line"><span class="ruby">LOG：日志记录。</span></span><br></pre></td></tr></table></figure><h2 id="6-Ref"><a href="#6-Ref" class="headerlink" title="6. Ref"></a>6. Ref</h2><ol><li><a href="http://man.linuxde.net/iptables" target="_blank" rel="noopener">iptables命令</a></li><li><a href="https://www.vultr.com/docs/setup-iptables-firewall-on-centos-6" target="_blank" rel="noopener">Setup IPTables Firewall on CentOS 6</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7" target="_blank" rel="noopener">How To Set Up a Firewall Using FirewallD on CentOS 7</a></li><li><a href="https://www.vultr.com/docs/changing-your-ssh-port-for-extra-security-on-centos-6-or-7" target="_blank" rel="noopener">Changing Your SSH Port For Extra Security on CentOS 6 or 7</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning basics p2:loading custom data</title>
      <link href="/published/2019/03/24/Deep-Learning-basics-p2-loading-custom-data/"/>
      <url>/published/2019/03/24/Deep-Learning-basics-p2-loading-custom-data/</url>
      
        <content type="html"><![CDATA[<p>本文主要包括：</p><ul><li>获取微软的猫和狗的数据集，显示数据集信息</li><li>通过数据集构建训练数据</li><li>对训练数据进行处理，构建自定义模型<br><strong>注意：本文代码可以在Jupyter Notebook上顺序执行。</strong></li></ul><a id="more"></a><blockquote><p>0 导入依赖包</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="title">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置变量</span></span><br><span class="line"><span class="type">DATADIR</span> = <span class="string">"G:\Resources\datasets\dataCatDog\PetImages"</span></span><br><span class="line"><span class="type">CATEGORIES</span> = [<span class="string">"Dog"</span>, <span class="string">"Cat"</span>]</span><br></pre></td></tr></table></figure><blockquote><p>1 读取原始图片</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> category <span class="keyword">in</span> CATEGORIES: <span class="comment">#分类</span></span><br><span class="line">    path = os.path.join(DATADIR, category)  <span class="comment">#创建狗和猫的路径</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> os.listdir(path):    <span class="comment">#迭代所有图片</span></span><br><span class="line">        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)   <span class="comment">#读取并转化为数组</span></span><br><span class="line">        plt.imshow(img_array, cmap=<span class="string">'gray'</span>)  <span class="comment">#设置配色方案</span></span><br><span class="line">        plt.show()  <span class="comment">#显示</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">break</span>   <span class="comment">#仅仅显示一个</span></span><br><span class="line">    <span class="built_in">break</span>   <span class="comment">#仅仅显示第一类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="built_in">print</span>(img_array)</span><br><span class="line"><span class="comment"># 显示大小</span></span><br><span class="line"><span class="built_in">print</span>(img_array.shape)</span><br></pre></td></tr></table></figure><blockquote><p>2 重新设置大小</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IMG_SIZE = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span><span class="type">_array</span> = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))</span><br><span class="line">plt.imshow(<span class="keyword">new</span><span class="type">_array</span>, cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>3 构建训练数据集</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">training_data = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_training_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> category <span class="keyword">in</span> CATEGORIES:</span><br><span class="line">        path = os.path.join(DATADIR, category)</span><br><span class="line">        <span class="comment"># 获取分类类别索引    0:dog, 1:cat</span></span><br><span class="line">        class_num = CATEGORIES.index(category)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> tqdm(os.listdir(path)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 读取图片，并保存为array</span></span><br><span class="line">                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)</span><br><span class="line">                <span class="comment"># 重置大小并保存</span></span><br><span class="line">                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))</span><br><span class="line">                <span class="comment"># 将新分类添加到训练数据</span></span><br><span class="line">                training_data.append([new_array, class_num])</span><br><span class="line">            <span class="comment"># 捕获异常，防止出现异常</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用训练数据</span></span><br><span class="line">create_training_data()</span><br><span class="line">print(len(training_data))</span><br></pre></td></tr></table></figure><blockquote><p>4 对训练集进行随机排序</p></blockquote><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">random.shuffle(training_data)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 通过遍历，确认随机排序结果</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">sample</span> <span class="keyword">in</span> training_data[:<span class="number">10</span>]:</span><br><span class="line">    print(<span class="keyword">sample</span>[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><blockquote><p>5 构建模型</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">X = []</span><br><span class="line">Y = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">features</span>, <span class="built_in">label</span> <span class="keyword">in</span> training_data:</span><br><span class="line">    X.<span class="built_in">append</span>(<span class="built_in">features</span>)</span><br><span class="line">    Y.<span class="built_in">append</span>(<span class="built_in">label</span>)</span><br><span class="line"></span><br><span class="line"># 重构张量为目标尺寸元组，其中存储的内容不会改变</span><br><span class="line"><span class="built_in">print</span>(X[<span class="number">0</span>].reshape(-<span class="number">1</span>, IMG_SIZE, IMG_SIZE, <span class="number">1</span>))</span><br><span class="line">X = <span class="built_in">np</span>.<span class="built_in">array</span>(X).reshape(-<span class="number">1</span>, IMG_SIZE, IMG_SIZE, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>6 保存模型数据</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 保存X</span></span><br><span class="line">pickle_out = <span class="keyword">open</span>(<span class="string">"X.pickle"</span>,<span class="string">"wb"</span>)</span><br><span class="line">pickle.dump(X, pickle_out)</span><br><span class="line">pickle_out.<span class="built_in">close</span>()</span><br><span class="line"><span class="meta"># 保存Y</span></span><br><span class="line">pickle_out = <span class="keyword">open</span>(<span class="string">"Y.pickle"</span>,<span class="string">"wb"</span>)</span><br><span class="line">pickle.dump(Y, pickle_out)</span><br><span class="line">pickle_out.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><blockquote><p>7 读取X</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pickle_in = open(<span class="string">"X.pickle"</span>, <span class="string">"rb"</span>)</span><br><span class="line">X = pickle.load(pickle_in)</span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">X[1]</span><br></pre></td></tr></table></figure><p><em>原文：<a href="https://pythonprogramming.net/loading-custom-data-deep-learning-python-tensorflow-keras/" target="_blank" rel="noopener">Loading in your own data</a></em></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> DL basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning basics p1: Introduction to Deep Learning</title>
      <link href="/published/2019/03/20/Deep-Learning-basics-p1-Introduction-to-Deep-Learning/"/>
      <url>/published/2019/03/20/Deep-Learning-basics-p1-Introduction-to-Deep-Learning/</url>
      
        <content type="html"><![CDATA[<p>通过python、Tensorflow和Keras框架实现的深度学习实例。本文是深度学习的快速入门的第一章，简单介绍神经网络的实现原理，利用tensorflow，采用Keras模型对mnist数据集进行构建，训练和预测流程的简单实现。</p><a id="more"></a><p>简单总结下，不一定正确，只为加深印象。一般包括以下几个步骤：</p><ol><li>导包</li><li>实例化数据集</li><li>建立模型</li><li>配置学习模型</li><li>训练模型</li><li>测试样本</li><li>保存模型</li><li>进行预测</li></ol><p>示例代码如下。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 导包</span></span><br><span class="line"><span class="built_in">import</span> tensorflow as tf <span class="comment">#deep learning library. Tensors are just multi-dimensional arrays</span></span><br><span class="line"><span class="built_in">import</span> matplotlib.pyplot as plt</span><br><span class="line"><span class="built_in">import</span> numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 实例化数据集</span></span><br><span class="line"><span class="attr">mnist</span> = tf.keras.datasets.mnist <span class="comment"># mnist is a dataset of 28x28 images of handwritten digits and their labels</span></span><br><span class="line"></span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data() <span class="comment"># unpacks images to x_train/x_test and labels to y_train/y_test</span></span><br><span class="line"><span class="comment"># print(x_train[0])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化处理，使取值范围在[0, 1]或[-1, 1]</span></span><br><span class="line"><span class="attr">x_train</span> = tf.keras.utils.normalize(x_train, <span class="attr">axis=1)</span> <span class="comment"># scales data between 0 and 1</span></span><br><span class="line"><span class="attr">x_test</span> = tf.keras.utils.normalize(x_test, <span class="attr">axis=1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(x_train[0])</span></span><br><span class="line"><span class="comment"># imshow是设置图片的展示，cmap意思是color map，颜色方案，binary代表是白底黑字；</span></span><br><span class="line"><span class="comment"># plt.imshow(x_train[0], cmap = plt.cm.binary)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 建立模型</span></span><br><span class="line"><span class="attr">model</span> = tf.keras.models.Sequential()    <span class="comment"># a basic feed-forward model</span></span><br><span class="line">model.add(tf.keras.layers.Flatten()) <span class="comment"># flatten date ,takes our 28x28 and makes it 1x784  #</span></span><br><span class="line"><span class="comment"># Adds a densely-connected layer with 128 units to the model:</span></span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">128</span>, <span class="attr">activation=tf.nn.relu))</span></span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">128</span>, <span class="attr">activation=tf.nn.relu))</span></span><br><span class="line"><span class="comment"># Add a softmax layer with 10 output units:</span></span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">10</span>, <span class="attr">activation=tf.nn.softmax))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 配置学习模型</span></span><br><span class="line">model.compile(<span class="attr">optimizer='adam',</span> <span class="comment"># Good default optimizer to start with  #优化器</span></span><br><span class="line">            <span class="attr">loss='sparse_categorical_crossentropy',#</span> how will we calculate our <span class="string">"error."</span> Neural network aims to minimize loss.   <span class="comment">#优化期间最小化的函数</span></span><br><span class="line">            <span class="comment"># sparse: 稀疏的   categorical:绝对的，无条件的，分类的 crossentropy:交叉熵</span></span><br><span class="line">            <span class="attr">metrics=['accuracy'])</span> <span class="comment"># what to track #用于监控训练</span></span><br><span class="line"><span class="comment"># 5 训练模型 循环轮次：3</span></span><br><span class="line">model.fit(x_train, y_train, <span class="attr">epochs=3)</span>   <span class="comment"># train the model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 测试样本</span></span><br><span class="line">val_loss, <span class="attr">val_acc</span> = model.evaluate(x_test, y_test)  <span class="comment"># evaluate the out of sample data with model</span></span><br><span class="line">print(val_loss)  <span class="comment"># model's loss (error)</span></span><br><span class="line">print(val_acc)  <span class="comment"># model's accuracy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7 保存</span></span><br><span class="line">model.save('epic_num_reader.model')</span><br><span class="line"><span class="comment"># 重新实例化模型，会创建一个完全一样的模型</span></span><br><span class="line"><span class="attr">new_model</span> = tf.keras.models.load_model('epic_num_reader.model')</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 预测</span></span><br><span class="line"><span class="attr">predictions</span> = new_model.predict(x_test)</span><br><span class="line">print(predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示数字</span></span><br><span class="line">print(np.argmax(predictions[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示数字图像</span></span><br><span class="line">plt.imshow(x_test[<span class="number">0</span>], <span class="attr">cmap</span> = plt.cm.binary)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>原文：<a href="https://pythonprogramming.net/introduction-deep-learning-python-tensorflow-keras/" target="_blank" rel="noopener">Introduction to Deep Learning - Deep Learning basics with Python, TensorFlow and Keras p.1</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> DL basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win7下安装Anaconda3和tensorflow</title>
      <link href="/published/2019/03/19/win7%E4%B8%8B%E5%AE%89%E8%A3%85Anaconda3%E5%92%8Ctensorflow/"/>
      <url>/published/2019/03/19/win7%E4%B8%8B%E5%AE%89%E8%A3%85Anaconda3%E5%92%8Ctensorflow/</url>
      
        <content type="html"><![CDATA[<p>win7搭建Anaconda3及tensorflow环境<br>其中：本地python为v3.6.5, Anaconda3为Anaconda3-5.2.0-Windows-x86_64</p><a id="more"></a><h2 id="1-安装python"><a href="#1-安装python" class="headerlink" title="1   安装python"></a>1   安装python</h2><p>python3和python2环境变量共存设置<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span>Pytho<span class="symbol">n3</span><span class="meta">%</span>;<span class="meta">%</span>Pytho<span class="symbol">n3</span><span class="meta">%</span>\Scripts;<span class="meta">%</span>Pytho<span class="symbol">n2</span><span class="meta">%</span>;<span class="meta">%</span>Pytho<span class="symbol">n2</span><span class="meta">%</span>\Scripts;</span><br></pre></td></tr></table></figure></p><h2 id="2-安装及配置pip"><a href="#2-安装及配置pip" class="headerlink" title="2   安装及配置pip"></a>2   安装及配置pip</h2><p>安装及升级<br>python -m pip install –upgrade pip</p><p>国内pip源<br>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>华中理工大学：<a href="http://pypi.hustunique.com/" target="_blank" rel="noopener">http://pypi.hustunique.com/</a><br>山东理工大学：<a href="http://pypi.sdutlinux.org/" target="_blank" rel="noopener">http://pypi.sdutlinux.org/</a><br>豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></p><p>更改pip源<br>windows环境下，添加或修改为：<br><figure class="highlight vim"><figcaption><span>C:\Users\will\pip\pip.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure></p><p>linux环境下,添加或修改为：<br><figure class="highlight vim"><figcaption><span>$HOME/pip/pip.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure></p><h2 id="3-安装及配置Anaconda3"><a href="#3-安装及配置Anaconda3" class="headerlink" title="3   安装及配置Anaconda3"></a>3   安装及配置Anaconda3</h2><h3 id="3-1-下载Anaconda3"><a href="#3-1-下载Anaconda3" class="headerlink" title="3.1 下载Anaconda3"></a>3.1 下载Anaconda3</h3><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">Anaconda3-5.2.0</a>,进行安装</p><h3 id="3-2-配置Anaconda3环境变量"><a href="#3-2-配置Anaconda3环境变量" class="headerlink" title="3.2 配置Anaconda3环境变量"></a>3.2 配置Anaconda3环境变量</h3><p>新建系统变量：<code>ANACONDA3</code> 为 <code>C:/MyProgramFiles/Anaconda3</code><br>在Path添加<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%ANACONDA3%;%ANACONDA3%/Library/mingw-w64/bin;%ANACONDA3%/Library/bin;%ANACONDA3%/Scripts;</span><br></pre></td></tr></table></figure></p><p>参考后，目前没有配置：<code>%ANACONDA3%/Library/usr/bin</code>，原因：没找到路径,可能是win没有。</p><p>测试是否配置成功：命令行下输入:conda</p><h3 id="3-3-登录jupyter"><a href="#3-3-登录jupyter" class="headerlink" title="3.3 登录jupyter"></a>3.3 登录jupyter</h3><p>运行Jupyter Notebook。<br>看到<code>http://localhost:8888/?token=...</code>表示成功</p><h3 id="3-4-修改coanda包管理源"><a href="#3-4-修改coanda包管理源" class="headerlink" title="3.4 修改coanda包管理源"></a>3.4 修改coanda包管理源</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --<span class="built_in">add</span> channels http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/anaconda/pkgs/free/</span><br><span class="line">conda config --<span class="built_in">add</span> channels http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/anaconda/pkgs/main/</span><br><span class="line">conda config --<span class="keyword">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><p>可能有用，coanda删除源<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coanda <span class="built_in">config</span> --<span class="built_in">remove</span> channels https:<span class="comment">//error……</span></span><br></pre></td></tr></table></figure></p><h2 id="4-安装tensorflow"><a href="#4-安装tensorflow" class="headerlink" title="4    安装tensorflow"></a>4    安装tensorflow</h2><p>tensorflow版本分为：</p><ul><li>CPU版本：pip3 install –upgrade tensorflow</li><li>GPU版本：pip3 install –upgrade tensorflow-gpu（电脑不支持）</li></ul><p>安装cpu版本<br>pip install –upgrade tensorflow</p><p>tensorflow安装成功测试<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import tensorflow as tf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; hello = tf.constant(<span class="string">'Hello, TensorFlow!'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sess = tf.Session()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(sess.run(hello))</span></span><br></pre></td></tr></table></figure></p><p>Ref</p><ol><li><a href="https://www.cnblogs.com/amanda-x/p/7739467.html" target="_blank" rel="noopener">Anaconda安装与环境配置</a></li><li><a href="https://blog.csdn.net/jay100500/article/details/72792636" target="_blank" rel="noopener">TensorFlow在Windows环境下的搭建</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to my blog</title>
      <link href="/published/2019/03/10/welcome/"/>
      <url>/published/2019/03/10/welcome/</url>
      
        <content type="html"><![CDATA[<p>欢迎访问我的博客，希望留下你美丽的足记。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 欢迎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS6.5下搭建mongodb主、从、仲裁节点副本集实践</title>
      <link href="/published/2019/03/10/CentOS6-5%E4%B8%8B%E6%90%AD%E5%BB%BAmongodb%E4%B8%BB%E3%80%81%E4%BB%8E%E3%80%81%E4%BB%B2%E8%A3%81%E8%8A%82%E7%82%B9%E5%89%AF%E6%9C%AC%E9%9B%86%E5%AE%9E%E8%B7%B5/"/>
      <url>/published/2019/03/10/CentOS6-5%E4%B8%8B%E6%90%AD%E5%BB%BAmongodb%E4%B8%BB%E3%80%81%E4%BB%8E%E3%80%81%E4%BB%B2%E8%A3%81%E8%8A%82%E7%82%B9%E5%89%AF%E6%9C%AC%E9%9B%86%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>准备工作：</p><ul><li>下载mongodb，本次实践版本号mongodb-linux-x86_64-2.6.7.tgz</li><li>设置防火墙为允许</li><li>准备好配置文件，及生成keyFile文件，开启keyFile就相当于开启auth</li></ul><a id="more"></a><h2 id="1-设置配置文件，及生成keyFile文件"><a href="#1-设置配置文件，及生成keyFile文件" class="headerlink" title="1   设置配置文件，及生成keyFile文件"></a>1   设置配置文件，及生成keyFile文件</h2><h3 id="1-1-设置配置文件"><a href="#1-1-设置配置文件" class="headerlink" title="1.1 设置配置文件"></a>1.1 设置配置文件</h3><p>主节点<br><figure class="highlight ini"><figcaption><span>/usr/local/mongodb_master/mongodb_master.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dbpath</span>=/storage/mongodb/master</span><br><span class="line"><span class="attr">logpath</span>=/usr/local/mongodb_master/logs/mongodb.log</span><br><span class="line"><span class="attr">directoryperdb</span>=</span><br><span class="line"><span class="attr">port</span>=<span class="number">27017</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="number">500</span></span><br><span class="line"><span class="attr">smallfiles</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">fork</span>=</span><br><span class="line"><span class="attr">replSet</span>=rs1</span><br><span class="line"><span class="comment">#keyFile=/usr/local/mongodb_master/keyFile</span></span><br></pre></td></tr></table></figure><br><strong>注意：</strong>smallfiles= 是设置最小存储空间，用于自测试配置<br>配置文件中：<code>#keyFile=/usr/local/mongodb_master/keyFile，初始时注销掉，不启用</code><br>备节点<br><figure class="highlight ini"><figcaption><span>/usr/local/mongodb_master/mongodb_slave.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dbpath</span>=/storage/mongodb/slave</span><br><span class="line"><span class="attr">logpath</span>=/usr/local/mongodb_master/logs/mongodb.log</span><br><span class="line"><span class="attr">directoryperdb</span>=</span><br><span class="line"><span class="attr">port</span>=<span class="number">27018</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="number">500</span></span><br><span class="line"><span class="attr">smallfiles</span>=</span><br><span class="line"><span class="attr">fork</span>=</span><br><span class="line"><span class="attr">replSet</span>=rs1</span><br><span class="line"><span class="comment">#keyFile=/usr/local/mongodb_slave/keyFile</span></span><br></pre></td></tr></table></figure><br>仲裁节点<br><figure class="highlight ini"><figcaption><span>/usr/local/mongodb_master/mongodb_arbiter.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dbpath</span>=/storage/mongodb/arbiter</span><br><span class="line"><span class="attr">logpath</span>=/usr/local/mongodb_arbiter/logs/mongodb.log</span><br><span class="line"><span class="attr">directoryperdb</span>=</span><br><span class="line"><span class="attr">port</span>=<span class="number">27019</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="number">500</span></span><br><span class="line"><span class="attr">smallfiles</span>=</span><br><span class="line"><span class="attr">fork</span>=</span><br><span class="line"><span class="attr">replSet</span>=rs1</span><br><span class="line"><span class="comment">#keyFile=/usr/local/mongodb_arbiter/keyFile</span></span><br></pre></td></tr></table></figure></p><h3 id="1-2-生成keyFile文件"><a href="#1-2-生成keyFile文件" class="headerlink" title="1.2 生成keyFile文件"></a>1.2 生成keyFile文件</h3><p>keyFile文件的作用： 集群之间的安全认证，增加安全认证机制KeyFile（开启keyfile认证就默认开启了auth认证）</p><ol><li>openssl rand -base64 741 &gt; keyFile #生成keyFile</li><li>chmod 600 keyFile #设置权限，不能太大</li><li>scp –r keyFile root@host:/usr/local/mongodb_arbiter/keyFile ## 复制到所有节点</li></ol><h2 id="2-初始化副本集"><a href="#2-初始化副本集" class="headerlink" title="2   初始化副本集"></a>2   初始化副本集</h2><h3 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h3><p>单点初始化：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rscfg = &#123; </span><br><span class="line"><span class="string">_id:</span><span class="string">"rs1"</span>, </span><br><span class="line"><span class="string">members:</span>[</span><br><span class="line">&#123; <span class="string">_id:</span><span class="number">0</span>, <span class="string">host:</span><span class="string">"192.168.1.78:27017"</span>&#125;</span><br><span class="line">]&#125;</span><br><span class="line">rs.initiate( rscfg )</span><br></pre></td></tr></table></figure></p><p>多节点初始化:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rscfg = &#123; </span><br><span class="line"><span class="string">_id:</span><span class="string">"rs1"</span>, </span><br><span class="line"><span class="string">members:</span>[</span><br><span class="line">&#123; <span class="string">_id:</span><span class="number">0</span>, <span class="string">host:</span><span class="string">"192.168.1.71:27017"</span>, <span class="string">priority:</span><span class="number">2</span>&#125;,</span><br><span class="line">&#123; <span class="string">_id:</span><span class="number">1</span>, <span class="string">host:</span><span class="string">"192.168.1.82:27018"</span>, <span class="string">priority:</span><span class="number">1</span>&#125;,</span><br><span class="line">&#123; <span class="string">_id:</span><span class="number">2</span>, <span class="string">host:</span><span class="string">"192.168.1.71:27019"</span>, <span class="string">arbiterOnly:</span><span class="literal">true</span>&#125;</span><br><span class="line">]&#125;</span><br><span class="line">rs.initiate( rscfg )</span><br></pre></td></tr></table></figure></p><p>2.2 单节点初始化后：添加、删除节点操作<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">添加secondary：rs.<span class="builtin-name">add</span>(&#123;host: <span class="string">"192.168.1.78:27018"</span>, priority: 1 &#125;)</span><br><span class="line">添加仲裁点：rs.addArb(<span class="string">"192.168.1.78:27019"</span>)</span><br><span class="line">移除节点：rs.<span class="builtin-name">remove</span>(&#123;host: <span class="string">"192.168.1.78:27019"</span>&#125;)</span><br><span class="line">重置节点权限：</span><br><span class="line"><span class="attribute">conf</span>=rscfg.conf()</span><br><span class="line">conf.members[0].<span class="attribute">priority</span>=2</span><br><span class="line">rs.reconfig(config)</span><br><span class="line">查看集群配置：rs.conf();</span><br><span class="line">查看集群状态：rs.status();</span><br></pre></td></tr></table></figure></p><h2 id="3-添加管理员用户及普通用户-并进行验证-在rs1-PRIMARY上操作"><a href="#3-添加管理员用户及普通用户-并进行验证-在rs1-PRIMARY上操作" class="headerlink" title="3   添加管理员用户及普通用户,并进行验证(在rs1:PRIMARY上操作)"></a>3   添加管理员用户及普通用户,并进行验证(在rs1:PRIMARY上操作)</h2><p><strong>注意：</strong>需要在主节点(PRIMARY)操作;帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)<br>创建用户管理员:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">admin = db.getSiblingDB(<span class="string">"admin"</span>); <span class="meta">#其中getSiblingDB为获取另一个数据库对象</span></span><br><span class="line">admin.createUser(</span><br><span class="line">  &#123;</span><br><span class="line"><span class="symbol">    user:</span> <span class="string">"admin"</span>,</span><br><span class="line"><span class="symbol">    pwd:</span> <span class="string">"admin"</span>,</span><br><span class="line"><span class="symbol">    roles:</span> [ &#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">admin.auth(<span class="string">"admin"</span>, <span class="string">"admin"</span> );</span><br></pre></td></tr></table></figure></p><p>创建集群管理员:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">admin</span><span class="selector-class">.createUser</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attribute">user</span>: <span class="string">"username"</span>,</span><br><span class="line">    <span class="attribute">pwd</span>: <span class="string">"pwd"</span>,</span><br><span class="line">    <span class="attribute">roles</span>: [ &#123; <span class="attribute">role</span>: <span class="string">"clusterAdmin"</span>, <span class="attribute">db</span>: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="selector-tag">admin</span><span class="selector-class">.auth</span>(<span class="string">"username"</span>, <span class="string">"pwd"</span> );</span><br></pre></td></tr></table></figure></p><p>其他用户相关操作</p><ul><li>更新用户：db.getSiblingDB(“admin”);updateUser(“username”,{roles: [ { role: “userAdminAnyDatabase”, db: “admin” } ]})</li><li>验证用户：db.getSiblingDB(“admin”).auth(“username”, “pwd” )</li><li>修改密码：db.changeUserPassword(“username”,”pwd”);</li><li><p>集群及其他角色授权：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.grantRolesToUser( <span class="string">"admin"</span> , [ &#123; <span class="string">"role"</span>: <span class="string">"clusterAdmin"</span>, <span class="string">"db"</span>: <span class="string">"admin"</span> &#125;,</span><br><span class="line">&#123; <span class="string">"role"</span>: <span class="string">"userAdminAnyDatabase"</span>, <span class="string">"db"</span>: <span class="string">"admin"</span> &#125;,</span><br><span class="line">&#123; <span class="string">"role"</span>: <span class="string">"dbAdminAnyDatabase"</span>, <span class="string">"db"</span>: <span class="string">"admin"</span> &#125;,</span><br><span class="line">&#123; role: <span class="string">"root"</span>, db: <span class="string">"admin"</span> &#125; ])</span><br></pre></td></tr></table></figure></li><li><p>如果是admin，可以额外添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attribute">role</span>: <span class="string">"dbOwner"</span>, db: <span class="string">"admin"</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>加上dbOwner可以直接操作其他数据库如replSetTest，不需要重新认证 db.auth(‘admin’,’admin’)</p><h2 id="4-重启集群"><a href="#4-重启集群" class="headerlink" title="4   重启集群"></a>4   重启集群</h2><p>由于关闭主节点，则主节点状态会切到副本集中的从节点，因此，先关闭从节点，最后关闭主节点。<br>db.getSiblingDB(“admin”).shutdownServer(); 或ps -ef | grep mongo, kill +pid</p><p>取消所有节点配置文件中的注释，<code>keyFile=/usr/local/mongodb_arbiter/keyFile</code>重新启动服务</p><p>如果启动异常，删除mongo.lock, rm -f mongo.lock，重新启动</p><h2 id="5-验证"><a href="#5-验证" class="headerlink" title="5   验证"></a>5   验证</h2><p>登录主节点：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">rs1:</span>PRIMARY&gt;rs.status();</span><br><span class="line">显示：not authorized <span class="keyword">for</span> query</span><br><span class="line"><span class="string">rs1:</span>PRIMARY&gt;db.getSiblingDB(<span class="string">"admin"</span>).auth(<span class="string">"username"</span>, <span class="string">"pwd"</span> );</span><br><span class="line">授权后，可进行操作</span><br><span class="line"><span class="string">rs1:</span>PRIMARY&gt;db.t1.insert(&#123;<span class="string">"name"</span>:<span class="string">"zs"</span>,<span class="string">"age"</span>:<span class="number">11</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>登录从节点查看是否同步：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rs1:SECONDARY&gt;<span class="keyword">db</span>.t1.find() #显示：not authorized <span class="keyword">for</span> <span class="keyword">query</span> <span class="keyword">on</span> <span class="keyword">test</span>.t1"</span><br><span class="line">rs1:SECONDARY&gt;<span class="keyword">db</span>.getSiblingDB(<span class="string">"admin"</span>).auth(<span class="string">"username"</span>, <span class="string">"pwd"</span> ); #验证</span><br><span class="line">rs1:SECONDARY&gt;<span class="keyword">db</span>.t1.find(); #not master and slaveOk=false"</span><br><span class="line">rs1:SECONDARY&gt;<span class="keyword">db</span>.setSlaveOk(); #读权限</span><br><span class="line">rs1:SECONDARY&gt;<span class="keyword">db</span>.t1.find(); #查询所有记录</span><br></pre></td></tr></table></figure></p><p><strong> 注意：</strong>授权操作过程</p><p>rs1:PRIMARY&gt;rs.conf() # 访问异常,not authorized for query on test.t1”<br>rs1:PRIMARY&gt;use admin #切换数据库<br>rs1:PRIMARY&gt;db.auth(“username”, “pwd” ); #授权<br>rs1:PRIMARY&gt;use test #切换其他库<br>rs1:PRIMARY&gt;rs.conf() #正常访问</p><h2 id="6-java测试副本集连接代码"><a href="#6-java测试副本集连接代码" class="headerlink" title="6   java测试副本集连接代码"></a>6   java测试副本集连接代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMongo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MongoClient mongoClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DB <span class="title">getDB</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DB conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mongoClient == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            intializeMongoClient();</span><br><span class="line">        &#125;</span><br><span class="line">        conn = mongoClient.getDB(<span class="string">"testdb"</span>);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">intializeMongoClient</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MongoClientURI mongoClientURI = <span class="keyword">new</span>  MongoClientURI(<span class="string">"mongodb://username:pwd@192.168.1.78: 27017,192.168.1.78: 27018,192.168.1.78: 27019/admin"</span>);</span><br><span class="line"><span class="comment">//        MongoClientURI mongoClientURI = new MongoClientURI("mongodb://192.168.1.78: 27017");</span></span><br><span class="line">        mongoClient = <span class="keyword">new</span> MongoClient(mongoClientURI);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mongoClient != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mongoClient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TestMongo testMongo = <span class="keyword">new</span> TestMongo();</span><br><span class="line">        DBObject content=<span class="keyword">new</span> BasicDBObject();</span><br><span class="line">        content.put(<span class="string">"name"</span>,<span class="string">"北京4"</span>);</span><br><span class="line">        content.put(<span class="string">"type"</span>,<span class="string">"首都"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            DB db = testMongo.getDB();</span><br><span class="line">            DBCollection collection=db.getCollection(<span class="string">"n1"</span>);</span><br><span class="line">            collection.insert(content);</span><br><span class="line">            <span class="keyword">long</span> count = collection.getCount();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            testMongo.closeConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (UnknownHostException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://docs.mongodb.com/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#enforce-keyfile-access-control-on-existing-replica-set" target="_blank" rel="noopener">Enforce Keyfile Access Control in a Replica Set</a></li><li><a href="https://docs.mongodb.com/v2.6/tutorial/enable-authentication-in-sharded-cluster/" target="_blank" rel="noopener">Enable Authentication in a Sharded Cluster</a></li><li><a href="https://blog.51cto.com/lovelace/1441047" target="_blank" rel="noopener">mongodb之replSet复制集 + auth</a></li><li><a href="https://www.cnblogs.com/Joans/p/7724144.html" target="_blank" rel="noopener">mongodb副本集用户权限设置 </a></li><li><a href="https://www.bbsmax.com/A/obzbY0MVdE/" target="_blank" rel="noopener">Mongodb集群搭建及spring和java连接配置记录</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
